"""
This type stub file was generated by pyright.
"""

logger = ...
def read_fstring(bio): # -> Literal['']:
    ...

def write_fstring(bio, string): # -> None:
    ...

def get_chunk_dir(version): # -> Literal['ChunksV4', 'ChunksV3', 'ChunksV2', 'Chunks']:
    ...

class Manifest:
    header_magic = ...
    default_serialisation_version = ...
    def __init__(self) -> None:
        ...
    
    @property
    def compressed(self): # -> int:
        ...
    
    @classmethod
    def read_all(cls, data): # -> Self@Manifest:
        ...
    
    @classmethod
    def read(cls, data): # -> Self@Manifest:
        ...
    
    def write(self, fp=..., compress=...): # -> int | bytes:
        ...
    
    def apply_delta_manifest(self, delta_manifest: Manifest): # -> None:
        ...
    


class ManifestMeta:
    def __init__(self) -> None:
        ...
    
    @property
    def build_id(self): # -> str:
        ...
    
    @classmethod
    def read(cls, bio): # -> Self@ManifestMeta:
        ...
    
    def write(self, bio): # -> None:
        ...
    


class CDL:
    def __init__(self) -> None:
        ...
    
    def get_chunk_by_path(self, path):
        ...
    
    def get_chunk_by_guid(self, guid):
        """
        Get chunk by GUID string or number, creates index of chunks on first call

        Integer GUIDs are usually faster and require less memory, use those when possible.

        :param guid:
        :return:
        """
        ...
    
    def get_chunk_by_guid_str(self, guid):
        ...
    
    def get_chunk_by_guid_num(self, guid_int):
        ...
    
    @classmethod
    def read(cls, bio, manifest_version=...): # -> Self@CDL:
        ...
    
    def write(self, bio): # -> None:
        ...
    


class ChunkInfo:
    def __init__(self, manifest_version=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def guid_str(self): # -> str:
        ...
    
    @property
    def guid_num(self):
        ...
    
    @property
    def group_num(self): # -> int | None:
        ...
    
    @group_num.setter
    def group_num(self, value): # -> None:
        ...
    
    @property
    def path(self): # -> str:
        ...
    


class FML:
    def __init__(self) -> None:
        ...
    
    def get_file_by_path(self, path):
        ...
    
    @classmethod
    def read(cls, bio): # -> Self@FML:
        ...
    
    def write(self, bio): # -> None:
        ...
    


class FileManifest:
    def __init__(self) -> None:
        ...
    
    @property
    def read_only(self): # -> int:
        ...
    
    @property
    def compressed(self): # -> int:
        ...
    
    @property
    def executable(self): # -> int:
        ...
    
    @property
    def sha_hash(self): # -> bytes:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ChunkPart:
    def __init__(self, guid=..., offset=..., size=..., file_offset=...) -> None:
        ...
    
    @property
    def guid_str(self): # -> str:
        ...
    
    @property
    def guid_num(self):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class CustomFields:
    def __init__(self) -> None:
        ...
    
    def __getitem__(self, item):
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def items(self): # -> dict_items[Unknown, Unknown]:
        ...
    
    def keys(self): # -> dict_keys[Unknown, Unknown]:
        ...
    
    def values(self): # -> dict_values[Unknown, Unknown]:
        ...
    
    @classmethod
    def read(cls, bio): # -> Self@CustomFields:
        ...
    
    def write(self, bio): # -> None:
        ...
    


class ManifestComparison:
    def __init__(self) -> None:
        ...
    
    @classmethod
    def create(cls, manifest, old_manifest=...): # -> Self@ManifestComparison:
        ...
    


