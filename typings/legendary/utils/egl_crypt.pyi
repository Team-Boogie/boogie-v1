"""
This type stub file was generated by pyright.
"""

"""
Stripped down version of https://github.com/boppreh/aes which is in turn based
on https://github.com/bozhu/AES-Python with ECB decryption added.

You should practically never roll your own crypto like this.
In this case it's just unimportant enough since all it needs to do is decrypt some data from the EGL config file.
"""
s_box = ...
inv_s_box = ...
def sub_bytes(s): # -> None:
    ...

def inv_sub_bytes(s): # -> None:
    ...

def shift_rows(s): # -> None:
    ...

def inv_shift_rows(s): # -> None:
    ...

def add_round_key(s, k): # -> None:
    ...

xtime = ...
def mix_single_column(a): # -> None:
    ...

def mix_columns(s): # -> None:
    ...

def inv_mix_columns(s): # -> None:
    ...

r_con = ...
def bytes2matrix(text): # -> list[list[Unknown]]:
    """ Converts a 16-byte array into a 4x4 matrix.  """
    ...

def matrix2bytes(matrix): # -> bytes:
    """ Converts a 4x4 matrix into a 16-byte array.  """
    ...

def xor_bytes(a, b): # -> bytes:
    """ Returns a new byte array with the elements xor'ed. """
    ...

def unpad(plaintext):
    """
    Removes a PKCS#7 padding, returning the unpadded text and ensuring the
    padding was correct.
    """
    ...

def split_blocks(message, block_size=..., require_padding=...): # -> list[Unknown]:
    ...

class AES:
    """
    Class for AES-128 encryption with CBC mode and PKCS#7.

    This is a raw implementation of AES, without key stretching or IV
    management. Unless you need that, please use `encrypt` and `decrypt`.
    """
    rounds_by_key_size = ...
    def __init__(self, master_key) -> None:
        """
        Initializes the object with a given key.
        """
        ...
    
    def decrypt_block(self, ciphertext): # -> bytes:
        """
        Decrypts a single block of 16 byte long ciphertext.
        """
        ...
    
    def decrypt_ecb(self, ciphertext): # -> bytes:
        """
        Decrypts `ciphertext` using ECB mode
        """
        ...
    


def decrypt_epic_data(key: str, encrypted: bytes) -> str:
    ...

