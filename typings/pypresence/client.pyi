"""
This type stub file was generated by pyright.
"""

from typing import List
from .baseclient import BaseClient
from .exceptions import *

class Client(BaseClient):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def register_event(self, event: str, func: callable, args=...): # -> None:
        ...
    
    def unregister_event(self, event: str, args=...): # -> None:
        ...
    
    def on_event(self, data): # -> None:
        ...
    
    def authorize(self, client_id: str, scopes: List[str]):
        ...
    
    def authenticate(self, token: str):
        ...
    
    def get_guilds(self):
        ...
    
    def get_guild(self, guild_id: str):
        ...
    
    def get_channel(self, channel_id: str):
        ...
    
    def get_channels(self, guild_id: str):
        ...
    
    def set_user_voice_settings(self, user_id: str, pan_left: float = ..., pan_right: float = ..., volume: int = ..., mute: bool = ...):
        ...
    
    def select_voice_channel(self, channel_id: str):
        ...
    
    def get_selected_voice_channel(self):
        ...
    
    def select_text_channel(self, channel_id: str):
        ...
    
    def set_activity(self, pid: int = ..., state: str = ..., details: str = ..., start: int = ..., end: int = ..., large_image: str = ..., large_text: str = ..., small_image: str = ..., small_text: str = ..., party_id: str = ..., party_size: list = ..., join: str = ..., spectate: str = ..., match: str = ..., buttons: list = ..., instance: bool = ...):
        ...
    
    def clear_activity(self, pid: int = ...):
        ...
    
    def subscribe(self, event: str, args=...):
        ...
    
    def unsubscribe(self, event: str, args=...):
        ...
    
    def get_voice_settings(self):
        ...
    
    def set_voice_settings(self, _input: dict = ..., output: dict = ..., mode: dict = ..., automatic_gain_control: bool = ..., echo_cancellation: bool = ..., noise_suppression: bool = ..., qos: bool = ..., silence_warning: bool = ..., deaf: bool = ..., mute: bool = ...):
        ...
    
    def capture_shortcut(self, action: str):
        ...
    
    def send_activity_join_invite(self, user_id: str):
        ...
    
    def close_activity_request(self, user_id: str):
        ...
    
    def close(self): # -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def read(self):
        ...
    


class AioClient(BaseClient):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    async def register_event(self, event: str, func: callable, args=...): # -> None:
        ...
    
    async def unregister_event(self, event: str, args=...): # -> None:
        ...
    
    async def on_event(self, data): # -> None:
        ...
    
    async def authorize(self, client_id: str, scopes: List[str]): # -> Any:
        ...
    
    async def authenticate(self, token: str): # -> Any:
        ...
    
    async def get_guilds(self): # -> Any:
        ...
    
    async def get_guild(self, guild_id: str): # -> Any:
        ...
    
    async def get_channel(self, channel_id: str): # -> Any:
        ...
    
    async def get_channels(self, guild_id: str): # -> Any:
        ...
    
    async def set_user_voice_settings(self, user_id: str, pan_left: float = ..., pan_right: float = ..., volume: int = ..., mute: bool = ...): # -> Any:
        ...
    
    async def select_voice_channel(self, channel_id: str): # -> Any:
        ...
    
    async def get_selected_voice_channel(self): # -> Any:
        ...
    
    async def select_text_channel(self, channel_id: str): # -> Any:
        ...
    
    async def set_activity(self, pid: int = ..., state: str = ..., details: str = ..., start: int = ..., end: int = ..., large_image: str = ..., large_text: str = ..., small_image: str = ..., small_text: str = ..., party_id: str = ..., party_size: list = ..., join: str = ..., spectate: str = ..., buttons: list = ..., match: str = ..., instance: bool = ...): # -> Any:
        ...
    
    async def clear_activity(self, pid: int = ...): # -> Any:
        ...
    
    async def subscribe(self, event: str, args=...): # -> Any:
        ...
    
    async def unsubscribe(self, event: str, args=...): # -> Any:
        ...
    
    async def get_voice_settings(self): # -> Any:
        ...
    
    async def set_voice_settings(self, _input: dict = ..., output: dict = ..., mode: dict = ..., automatic_gain_control: bool = ..., echo_cancellation: bool = ..., noise_suppression: bool = ..., qos: bool = ..., silence_warning: bool = ..., deaf: bool = ..., mute: bool = ...): # -> Any:
        ...
    
    async def capture_shortcut(self, action: str): # -> Any:
        ...
    
    async def send_activity_join_invite(self, user_id: str): # -> Any:
        ...
    
    async def close_activity_request(self, user_id: str): # -> Any:
        ...
    
    def close(self): # -> None:
        ...
    
    async def start(self): # -> None:
        ...
    
    async def read(self): # -> Any:
        ...
    


