"""
This type stub file was generated by pyright.
"""

import logging
import re
import requests.adapters
import urllib3.connection
import urllib3.util
import urllib3.util.url
from ..dependencies import brotli, requests, urllib3
from ._helper import InstanceStoreMixin
from .common import RequestHandler, Response, register_preference, register_rh

if requests is None:
    ...
if urllib3 is None:
    ...
urllib3_version = ...
if urllib3_version < (1, 26, 17):
    ...
if requests.__build__ < 143874:
    ...
SUPPORTED_ENCODINGS = ...
if brotli is not None:
    ...
class Urllib3PercentREOverride:
    def __init__(self, r: re.Pattern) -> None:
        ...
    
    def __getattr__(self, item): # -> Any:
        ...
    
    def subn(self, repl, string, *args, **kwargs): # -> tuple[Unknown, Unknown]:
        ...
    


if hasattr(urllib3.util.url, 'PERCENT_RE'):
    ...
else:
    ...
if urllib3_version < (2, 0, 0):
    ...
class RequestsResponseAdapter(Response):
    def __init__(self, res: requests.models.Response) -> None:
        ...
    
    def read(self, amt: int | None = ...): # -> Any:
        ...
    


class RequestsHTTPAdapter(requests.adapters.HTTPAdapter):
    def __init__(self, ssl_context=..., proxy_ssl_context=..., source_address=..., **kwargs) -> None:
        ...
    
    def init_poolmanager(self, *args, **kwargs):
        ...
    
    def proxy_manager_for(self, proxy, **proxy_kwargs):
        ...
    
    def cert_verify(*args, **kwargs): # -> None:
        ...
    
    def get_connection_with_tls_context(self, request, verify, proxies=..., cert=...):
        ...
    


class RequestsSession(requests.sessions.Session):
    """
    Ensure unified redirect method handling with our urllib redirect handler.
    """
    def rebuild_method(self, prepared_request, response): # -> None:
        ...
    
    def rebuild_auth(self, prepared_request, response):
        ...
    


class Urllib3LoggingFilter(logging.Filter):
    def filter(self, record): # -> bool | Any:
        ...
    


class Urllib3LoggingHandler(logging.Handler):
    """Redirect urllib3 logs to our logger"""
    def __init__(self, logger, *args, **kwargs) -> None:
        ...
    
    def emit(self, record): # -> None:
        ...
    


@register_rh
class RequestsRH(RequestHandler, InstanceStoreMixin):
    """Requests RequestHandler
    https://github.com/psf/requests
    """
    _SUPPORTED_URL_SCHEMES = ...
    _SUPPORTED_ENCODINGS = ...
    _SUPPORTED_PROXY_SCHEMES = ...
    _SUPPORTED_FEATURES = ...
    RH_NAME = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def close(self): # -> None:
        ...
    


@register_preference(RequestsRH)
def requests_preference(rh, request): # -> Literal[100]:
    ...

class SocksHTTPConnection(urllib3.connection.HTTPConnection):
    def __init__(self, _socks_options, *args, **kwargs) -> None:
        ...
    


class SocksHTTPSConnection(SocksHTTPConnection, urllib3.connection.HTTPSConnection):
    ...


class SocksHTTPConnectionPool(urllib3.HTTPConnectionPool):
    ConnectionCls = SocksHTTPConnection


class SocksHTTPSConnectionPool(urllib3.HTTPSConnectionPool):
    ConnectionCls = SocksHTTPSConnection


class SocksProxyManager(urllib3.PoolManager):
    def __init__(self, socks_proxy, username=..., password=..., num_pools=..., headers=..., **connection_pool_kw) -> None:
        ...
    


