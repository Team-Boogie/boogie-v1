"""
This type stub file was generated by pyright.
"""

import ssl
import typing
from collections.abc import Iterable
from ..utils.networking import HTTPHeaderDict

if typing.TYPE_CHECKING:
    ...
def ssl_load_certs(context: ssl.SSLContext, use_certifi=...): # -> None:
    ...

def ssl_load_windows_store_certs(ssl_context, storename): # -> None:
    ...

def make_socks_proxy_opts(socks_proxy): # -> dict[str, Unknown]:
    ...

def select_proxy(url, proxies): # -> list[Unknown] | type[NO_DEFAULT] | dict[Unknown, Unknown] | None:
    """Unified proxy selector for all backends"""
    ...

def get_redirect_method(method, status): # -> Literal['GET', 'HEAD']:
    """Unified redirect method handling"""
    ...

def make_ssl_context(verify=..., client_certificate=..., client_certificate_key=..., client_certificate_password=..., legacy_support=..., use_certifi=...): # -> SSLContext:
    ...

class InstanceStoreMixin:
    def __init__(self, **kwargs) -> None:
        ...
    


def add_accept_encoding_header(headers: HTTPHeaderDict, supported_encodings: Iterable[str]): # -> None:
    ...

def wrap_request_errors(func): # -> _Wrapped[..., Unknown, (self: Unknown, *args: Unknown, **kwargs: Unknown), Unknown]:
    ...

def create_socks_proxy_socket(dest_addr, proxy_args, proxy_ip_addr, timeout, source_address): # -> sockssocket:
    ...

def create_connection(address, timeout=..., source_address=..., *, _create_socket_func=...):
    ...

