"""
This type stub file was generated by pyright.
"""

import weakref
from collections.abc import Awaitable, Callable
from typing import Any, Generic, ParamSpec, TypeVar

"""
This module provides signals, which are a simple dispatching system that allows any number of interested parties
to subscribe to events ("signals").

This is similar to the Blinker library (https://pypi.org/project/blinker/), with the following changes:
  - provides only a small subset of Blinker's functionality
  - supports type hints
  - supports async receivers.
"""
P = ParamSpec("P")
R = TypeVar("R")
def make_weak_ref(obj: Any) -> weakref.ReferenceType:
    """
    Like weakref.ref(), but using weakref.WeakMethod for bound methods.
    """
    ...

class _SignalMixin:
    def __init__(self) -> None:
        ...
    
    def connect(self, receiver: Callable) -> None:
        """
        Register a signal receiver.

        The signal will only hold a weak reference to the receiver function.
        """
        ...
    
    def disconnect(self, receiver: Callable) -> None:
        ...
    
    def notify(self, *args, **kwargs): # -> Generator[Unknown, Any, None]:
        ...
    


class _SyncSignal(Generic[P], _SignalMixin):
    def connect(self, receiver: Callable[P, None]) -> None:
        ...
    
    def disconnect(self, receiver: Callable[P, None]) -> None:
        ...
    
    def send(self, *args: P.args, **kwargs: P.kwargs) -> None:
        ...
    


class _AsyncSignal(Generic[P], _SignalMixin):
    def connect(self, receiver: Callable[P, Awaitable[None] | None]) -> None:
        ...
    
    def disconnect(self, receiver: Callable[P, Awaitable[None] | None]) -> None:
        ...
    
    async def send(self, *args: P.args, **kwargs: P.kwargs) -> None:
        ...
    


def SyncSignal(receiver_spec: Callable[P, None]) -> _SyncSignal[P]:
    """
    Create a synchronous signal with the given function signature for receivers.

    Example:

        s = SyncSignal(lambda event: None)  # all receivers must accept a single "event" argument.
        def receiver(event):
            print(event)

        s.connect(receiver)
        s.send("foo")  # prints foo
        s.send(event="bar")  # prints bar

        def receiver2():
            ...

        s.connect(receiver2)  # mypy complains about receiver2 not having the right signature

        s2 = SyncSignal(lambda: None)  # this signal has no arguments
        s2.send()
    """
    ...

def AsyncSignal(receiver_spec: Callable[P, Awaitable[None] | None]) -> _AsyncSignal[P]:
    """
    Create an signal that supports both regular and async receivers:

    Example:

        s = AsyncSignal(lambda event: None)
        async def receiver(event):
            print(event)
        s.connect(receiver)
        await s.send("foo")  # prints foo
    """
    ...

