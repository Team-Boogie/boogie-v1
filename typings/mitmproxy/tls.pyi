"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from OpenSSL import SSL
from mitmproxy import connection
from mitmproxy.proxy import context

class ClientHello:
    """
    A TLS ClientHello is the first message sent by the client when initiating TLS.
    """
    _raw_bytes: bytes
    def __init__(self, raw_client_hello: bytes, dtls: bool = ...) -> None:
        """Create a TLS ClientHello object from raw bytes."""
        ...
    
    def raw_bytes(self, wrap_in_record: bool = ...) -> bytes:
        """
        The raw ClientHello bytes as seen on the wire.

        If `wrap_in_record` is True, the ClientHello will be wrapped in a synthetic TLS record
        (`0x160303 + len(chm) + 0x01 + len(ch)`), which is the format expected by some tools.
        The synthetic record assumes TLS version (`0x0303`), which may be different from what has been sent over the
        wire. JA3 hashes are unaffected by this as they only use the TLS version from the ClientHello data structure.

        A future implementation may return not just the exact ClientHello, but also the exact record(s) as seen on the
        wire.
        """
        ...
    
    @property
    def cipher_suites(self) -> list[int]:
        """The cipher suites offered by the client (as raw ints)."""
        ...
    
    @property
    def sni(self) -> str | None:
        """
        The [Server Name Indication](https://en.wikipedia.org/wiki/Server_Name_Indication),
        which indicates which hostname the client wants to connect to.
        """
        ...
    
    @property
    def alpn_protocols(self) -> list[bytes]:
        """
        The application layer protocols offered by the client as part of the
        [ALPN](https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation) TLS extension.
        """
        ...
    
    @property
    def extensions(self) -> list[tuple[int, bytes]]:
        """The raw list of extensions in the form of `(extension_type, raw_bytes)` tuples."""
        ...
    
    def __repr__(self): # -> str:
        ...
    


@dataclass
class ClientHelloData:
    """
    Event data for `tls_clienthello` event hooks.
    """
    context: context.Context
    client_hello: ClientHello
    ignore_connection: bool = ...
    establish_server_tls_first: bool = ...


@dataclass
class TlsData:
    """
    Event data for `tls_start_client`, `tls_start_server`, and `tls_handshake` event hooks.
    """
    conn: connection.Connection
    context: context.Context
    ssl_conn: SSL.Connection | None = ...
    is_dtls: bool = ...


