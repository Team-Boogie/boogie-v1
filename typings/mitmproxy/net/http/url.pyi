"""
This type stub file was generated by pyright.
"""

from collections.abc import Sequence
from typing import AnyStr

_authority_re = ...
def parse(url): # -> tuple[Unknown | Literal[b"https"], bytes, Unknown | Literal[443, 80], bytes]:
    """
    URL-parsing function that checks that
        - port is an integer 0-65535
        - host is a valid IDNA-encoded hostname with no null-bytes
        - path is valid ASCII

    Args:
        A URL (as bytes or as unicode)

    Returns:
        A (scheme, host, port, path) tuple

    Raises:
        ValueError, if the URL is not properly formatted.
    """
    ...

def unparse(scheme: str, host: str, port: int, path: str = ...) -> str:
    """
    Returns a URL string, constructed from the specified components.

    Args:
        All args must be str.
    """
    ...

def encode(s: Sequence[tuple[str, str]], similar_to: str | None = ...) -> str:
    """
    Takes a list of (key, value) tuples and returns a urlencoded string.
    If similar_to is passed, the output is formatted similar to the provided urlencoded string.
    """
    ...

def decode(s): # -> list[tuple[Unknown, Unknown]]:
    """
    Takes a urlencoded string and returns a list of surrogate-escaped (key, value) tuples.
    """
    ...

def quote(b: str, safe: str = ...) -> str:
    """
    Returns:
        An ascii-encodable str.
    """
    ...

def unquote(s: str) -> str:
    """
    Args:
        s: A surrogate-escaped str
    Returns:
        A surrogate-escaped str
    """
    ...

def hostport(scheme: AnyStr, host: AnyStr, port: int) -> AnyStr:
    """
    Returns the host component, with a port specification if needed.
    """
    ...

def default_port(scheme: AnyStr) -> int | None:
    ...

def parse_authority(authority: AnyStr, check: bool) -> tuple[str, int | None]:
    """Extract the host and port from host header/authority information

    Raises:
        ValueError, if check is True and the authority information is malformed.
    """
    ...

