"""
This type stub file was generated by pyright.
"""

from typing import overload

"""
Utility functions for decoding response bodies.
"""
CachedDecode = ...
_cache = ...
@overload
def decode(encoded: None, encoding: str, errors: str = ...) -> None:
    ...

@overload
def decode(encoded: str, encoding: str, errors: str = ...) -> str:
    ...

@overload
def decode(encoded: bytes, encoding: str, errors: str = ...) -> str | bytes:
    ...

def decode(encoded: None | str | bytes, encoding: str, errors: str = ...) -> None | str | bytes:
    """
    Decode the given input object

    Returns:
        The decoded value

    Raises:
        ValueError, if decoding fails.
    """
    ...

@overload
def encode(decoded: None, encoding: str, errors: str = ...) -> None:
    ...

@overload
def encode(decoded: str, encoding: str, errors: str = ...) -> str | bytes:
    ...

@overload
def encode(decoded: bytes, encoding: str, errors: str = ...) -> bytes:
    ...

def encode(decoded: None | str | bytes, encoding, errors=...) -> None | str | bytes:
    """
    Encode the given input object

    Returns:
        The encoded value

    Raises:
        ValueError, if encoding fails.
    """
    ...

def identity(content):
    """
    Returns content unchanged. Identity is the default value of
    Accept-Encoding headers.
    """
    ...

def decode_gzip(content: bytes) -> bytes:
    ...

def encode_gzip(content: bytes) -> bytes:
    ...

def decode_brotli(content: bytes) -> bytes:
    ...

def encode_brotli(content: bytes) -> bytes:
    ...

def decode_zstd(content: bytes) -> bytes:
    ...

def encode_zstd(content: bytes) -> bytes:
    ...

def decode_deflate(content: bytes) -> bytes:
    """
    Returns decompressed data for DEFLATE. Some servers may respond with
    compressed data without a zlib header or checksum. An undocumented
    feature of zlib permits the lenient decompression of data missing both
    values.

    http://bugs.python.org/issue5784
    """
    ...

def encode_deflate(content: bytes) -> bytes:
    """
    Returns compressed content, always including zlib header and checksum.
    """
    ...

custom_decode = ...
custom_encode = ...
__all__ = ["encode", "decode"]
