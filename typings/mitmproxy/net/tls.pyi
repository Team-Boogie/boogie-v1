"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from enum import Enum
from functools import cache, lru_cache
from pathlib import Path
from typing import Any
from OpenSSL import SSL
from OpenSSL.crypto import X509
from mitmproxy import certs

class Method(Enum):
    TLS_SERVER_METHOD = ...
    TLS_CLIENT_METHOD = ...
    DTLS_SERVER_METHOD = ...
    DTLS_CLIENT_METHOD = ...


class Version(Enum):
    UNBOUNDED = ...
    SSL3 = ...
    TLS1 = ...
    TLS1_1 = ...
    TLS1_2 = ...
    TLS1_3 = ...


INSECURE_TLS_MIN_VERSIONS: tuple[Version, ...] = ...
class Verify(Enum):
    VERIFY_NONE = ...
    VERIFY_PEER = ...


DEFAULT_MIN_VERSION = ...
DEFAULT_MAX_VERSION = ...
DEFAULT_OPTIONS = ...
@cache
def is_supported_version(version: Version): # -> bool | None:
    ...

class MasterSecretLogger:
    def __init__(self, filename: Path) -> None:
        ...
    
    __name__ = ...
    def __call__(self, connection: SSL.Connection, keymaterial: bytes) -> None:
        ...
    
    def close(self): # -> None:
        ...
    


def make_master_secret_logger(filename: str | None) -> MasterSecretLogger | None:
    ...

log_master_secret = ...
@lru_cache(256)
def create_proxy_server_context(*, method: Method, min_version: Version, max_version: Version, cipher_list: tuple[str, ...] | None, ecdh_curve: str | None, verify: Verify, ca_path: str | None, ca_pemfile: str | None, client_cert: str | None, legacy_server_connect: bool) -> SSL.Context:
    ...

@lru_cache(256)
def create_client_proxy_context(*, method: Method, min_version: Version, max_version: Version, cipher_list: tuple[str, ...] | None, ecdh_curve: str | None, chain_file: Path | None, alpn_select_callback: Callable[[SSL.Connection, list[bytes]], Any] | None, request_client_cert: bool, extra_chain_certs: tuple[certs.Cert, ...], dhparams: certs.DHParams) -> SSL.Context:
    ...

def accept_all(conn_: SSL.Connection, x509: X509, errno: int, err_depth: int, is_cert_verified: int) -> bool:
    ...

def starts_like_tls_record(d: bytes) -> bool:
    """
    Returns:
        True, if the passed bytes could be the start of a TLS record
        False, otherwise.
    """
    ...

def starts_like_dtls_record(d: bytes) -> bool:
    """
    Returns:
        True, if the passed bytes could be the start of a DTLS record
        False, otherwise.
    """
    ...

