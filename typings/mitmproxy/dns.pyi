"""
This type stub file was generated by pyright.
"""

import struct
from collections.abc import Iterable
from dataclasses import dataclass
from ipaddress import IPv4Address, IPv6Address
from typing import ClassVar
from mitmproxy import flow
from mitmproxy.coretypes import serializable
from mitmproxy.net.dns.https_records import HTTPSRecord

@dataclass
class Question(serializable.SerializableDataclass):
    HEADER: ClassVar[struct.Struct] = ...
    name: str
    type: int
    class_: int
    def __str__(self) -> str:
        ...
    
    def to_json(self) -> dict:
        """
        Converts the question into json for mitmweb.
        Sync with web/src/flow.ts.
        """
        ...
    


@dataclass
class ResourceRecord(serializable.SerializableDataclass):
    DEFAULT_TTL: ClassVar[int] = ...
    HEADER: ClassVar[struct.Struct] = ...
    name: str
    type: int
    class_: int
    ttl: int
    data: bytes
    def __str__(self) -> str:
        ...
    
    @property
    def text(self) -> str:
        ...
    
    @text.setter
    def text(self, value: str) -> None:
        ...
    
    @property
    def ipv4_address(self) -> IPv4Address:
        ...
    
    @ipv4_address.setter
    def ipv4_address(self, ip: IPv4Address) -> None:
        ...
    
    @property
    def ipv6_address(self) -> IPv6Address:
        ...
    
    @ipv6_address.setter
    def ipv6_address(self, ip: IPv6Address) -> None:
        ...
    
    @property
    def domain_name(self) -> str:
        ...
    
    @domain_name.setter
    def domain_name(self, name: str) -> None:
        ...
    
    @property
    def https_alpn(self) -> tuple[bytes, ...] | None:
        ...
    
    @https_alpn.setter
    def https_alpn(self, alpn: Iterable[bytes] | None) -> None:
        ...
    
    @property
    def https_ech(self) -> str | None:
        ...
    
    @https_ech.setter
    def https_ech(self, ech: str | None) -> None:
        ...
    
    def to_json(self) -> dict:
        """
        Converts the resource record into json for mitmweb.
        Sync with web/src/flow.ts.
        """
        ...
    
    @classmethod
    def A(cls, name: str, ip: IPv4Address, *, ttl: int = ...) -> ResourceRecord:
        """Create an IPv4 resource record."""
        ...
    
    @classmethod
    def AAAA(cls, name: str, ip: IPv6Address, *, ttl: int = ...) -> ResourceRecord:
        """Create an IPv6 resource record."""
        ...
    
    @classmethod
    def CNAME(cls, alias: str, canonical: str, *, ttl: int = ...) -> ResourceRecord:
        """Create a canonical internet name resource record."""
        ...
    
    @classmethod
    def PTR(cls, inaddr: str, ptr: str, *, ttl: int = ...) -> ResourceRecord:
        """Create a canonical internet name resource record."""
        ...
    
    @classmethod
    def TXT(cls, name: str, text: str, *, ttl: int = ...) -> ResourceRecord:
        """Create a textual resource record."""
        ...
    
    @classmethod
    def HTTPS(cls, name: str, record: HTTPSRecord, ttl: int = ...) -> ResourceRecord:
        """Create a HTTPS resource record"""
        ...
    


@dataclass
class Message(serializable.SerializableDataclass):
    HEADER: ClassVar[struct.Struct] = ...
    timestamp: float
    id: int
    query: bool
    op_code: int
    authoritative_answer: bool
    truncation: bool
    recursion_desired: bool
    recursion_available: bool
    reserved: int
    response_code: int
    questions: list[Question]
    answers: list[ResourceRecord]
    authorities: list[ResourceRecord]
    additionals: list[ResourceRecord]
    def __str__(self) -> str:
        ...
    
    @property
    def content(self) -> bytes:
        """Returns the user-friendly content of all parts as encoded bytes."""
        ...
    
    @property
    def question(self) -> Question | None:
        """DNS practically only supports a single question at the
        same time, so this is a shorthand for this."""
        ...
    
    @property
    def size(self) -> int:
        """Returns the cumulative data size of all resource record sections."""
        ...
    
    def fail(self, response_code: int) -> Message:
        ...
    
    def succeed(self, answers: list[ResourceRecord]) -> Message:
        ...
    
    @classmethod
    def unpack(cls, buffer: bytes) -> Message:
        """Converts the entire given buffer into a DNS message."""
        ...
    
    @classmethod
    def unpack_from(cls, buffer: bytes | bytearray, offset: int) -> tuple[int, Message]:
        """Converts the buffer from a given offset into a DNS message and also returns its length."""
        ...
    
    @property
    def packed(self) -> bytes:
        """Converts the message into network bytes."""
        ...
    
    def to_json(self) -> dict:
        """
        Converts the message into json for mitmweb.
        Sync with web/src/flow.ts.
        """
        ...
    
    def copy(self) -> Message:
        ...
    


class DNSFlow(flow.Flow):
    """A DNSFlow is a collection of DNS messages representing a single DNS query."""
    request: Message
    response: Message | None = ...
    def get_state(self) -> serializable.State:
        ...
    
    def set_state(self, state: serializable.State) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


