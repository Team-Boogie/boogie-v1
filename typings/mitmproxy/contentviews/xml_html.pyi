"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from mitmproxy.contentviews import base

REGEX_TAG = ...
HTML_VOID_ELEMENTS = ...
NO_INDENT_TAGS = ...
INDENT = ...
class Token:
    def __init__(self, data) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Text(Token):
    @property
    def text(self):
        ...
    


class Tag(Token):
    @property
    def tag(self): # -> str:
        ...
    
    @property
    def is_comment(self) -> bool:
        ...
    
    @property
    def is_cdata(self) -> bool:
        ...
    
    @property
    def is_closing(self):
        ...
    
    @property
    def is_self_closing(self): # -> bool:
        ...
    
    @property
    def is_opening(self): # -> bool:
        ...
    
    @property
    def done(self):
        ...
    


def tokenize(data: str) -> Iterable[Token]:
    ...

def indent_text(data: str, prefix: str) -> str:
    ...

def is_inline_text(a: Token | None, b: Token | None, c: Token | None) -> bool:
    ...

def is_inline(prev2: Token | None, prev1: Token | None, t: Token | None, next1: Token | None, next2: Token | None) -> bool:
    ...

class ElementStack:
    """
    Keep track of how deeply nested our document is.
    """
    def __init__(self) -> None:
        ...
    
    def push_tag(self, tag: str): # -> None:
        ...
    
    def pop_tag(self, tag: str): # -> None:
        ...
    


def format_xml(tokens: Iterable[Token]) -> str:
    ...

class ViewXmlHtml(base.View):
    name = ...
    __content_types = ...
    def __call__(self, data, **metadata): # -> tuple[Literal['HTML', 'XML'], Iterator[TViewLine]]:
        ...
    
    def render_priority(self, data: bytes, *, content_type: str | None = ..., **metadata) -> float:
        ...
    


