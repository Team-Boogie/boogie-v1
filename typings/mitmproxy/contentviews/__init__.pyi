"""
This type stub file was generated by pyright.
"""

import traceback
from ..tcp import TCPMessage
from ..udp import UDPMessage
from ..websocket import WebSocketMessage
from . import auto, css, dns, graphql, grpc, hex, http3, image, javascript, json, mqtt, msgpack, multipart, protobuf, query, raw, urlencoded, wbxml, xml_html
from .base import KEY_MAX, TViewResult, View, format_dict, format_text
from mitmproxy import flow, http, tcp, udp
from mitmproxy.utils import signals, strutils

"""
Mitmproxy Content Views
=======================

mitmproxy includes a set of content views which can be used to
format/decode/highlight data. While they are mostly used for HTTP message
bodies, the may be used in other contexts, e.g. to decode WebSocket messages.

Thus, the View API is very minimalistic. The only arguments are `data` and
`**metadata`, where `data` is the actual content (as bytes). The contents on
metadata depend on the protocol in use. Known attributes can be found in
`base.View`.
"""
views: list[View] = ...
on_add = ...
on_remove = ...
def get(name: str) -> View | None:
    ...

def add(view: View) -> None:
    ...

def remove(view: View) -> None:
    ...

def safe_to_print(lines, encoding=...): # -> Generator[list[Unknown], Any, None]:
    """
    Wraps a content generator so that each text portion is a *safe to print* unicode string.
    """
    ...

def get_message_content_view(viewname: str, message: http.Message | TCPMessage | UDPMessage | WebSocketMessage, flow: flow.Flow): # -> tuple[Literal[''], Iterator[list[tuple[Literal['error'], Literal['content missing']]]], None] | tuple[str, Generator[list[Unknown], Any, None], str | None]:
    """
    Like get_content_view, but also handles message encoding.
    """
    ...

def get_content_view(viewmode: View, data: bytes, *, content_type: str | None = ..., flow: flow.Flow | None = ..., http_message: http.Message | None = ..., tcp_message: tcp.TCPMessage | None = ..., udp_message: udp.UDPMessage | None = ..., websocket_message: WebSocketMessage | None = ...): # -> tuple[str, Generator[list[Unknown], Any, None], str | None]:
    """
    Args:
        viewmode: the view to use.
        data, **metadata: arguments passed to View instance.

    Returns:
        A (description, content generator, error) tuple.
        If the content view raised an exception generating the view,
        the exception is returned in error and the flow is formatted in raw mode.
        In contrast to calling the views directly, text is always safe-to-print unicode.
    """
    ...

__all__ = ["View", "KEY_MAX", "format_text", "format_dict", "TViewResult", "get", "add", "remove", "get_content_view", "get_message_content_view"]
