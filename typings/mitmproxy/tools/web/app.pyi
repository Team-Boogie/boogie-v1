"""
This type stub file was generated by pyright.
"""

import asyncio
import tornado.web
import tornado.websocket
import mitmproxy.flow
import mitmproxy.tools.web.master
from collections.abc import Sequence
from typing import ClassVar
from mitmproxy import certs, http, log
from mitmproxy.http import HTTPFlow
from mitmproxy.tcp import TCPFlow, TCPMessage
from mitmproxy.udp import UDPFlow, UDPMessage
from mitmproxy.websocket import WebSocketMessage

TRANSPARENT_PNG = ...
def cert_to_json(certs: Sequence[certs.Cert]) -> dict | None:
    ...

def flow_to_json(flow: mitmproxy.flow.Flow) -> dict:
    """
    Remove flow message content and cert to save transmission space.
    Args:
        flow: The original flow.
    Sync with web/src/flow.ts.
    """
    ...

def logentry_to_json(e: log.LogEntry) -> dict:
    ...

class APIError(tornado.web.HTTPError):
    ...


class RequestHandler(tornado.web.RequestHandler):
    application: Application
    def write(self, chunk: str | bytes | dict | list): # -> None:
        ...
    
    def set_default_headers(self): # -> None:
        ...
    
    @property
    def json(self): # -> Any:
        ...
    
    @property
    def filecontents(self): # -> bytes:
        """
        Accept either a multipart/form file upload or just take the plain request body.

        """
        ...
    
    @property
    def view(self) -> mitmproxy.addons.view.View:
        ...
    
    @property
    def master(self) -> mitmproxy.tools.web.master.WebMaster:
        ...
    
    @property
    def flow(self) -> mitmproxy.flow.Flow:
        ...
    
    def write_error(self, status_code: int, **kwargs): # -> None:
        ...
    


class IndexHandler(RequestHandler):
    def get(self): # -> None:
        ...
    


class FilterHelp(RequestHandler):
    def get(self): # -> None:
        ...
    


class WebSocketEventBroadcaster(tornado.websocket.WebSocketHandler):
    connections: ClassVar[set[WebSocketEventBroadcaster]]
    _send_tasks: ClassVar[set[asyncio.Task]] = ...
    def open(self, *args, **kwargs): # -> None:
        ...
    
    def on_close(self): # -> None:
        ...
    
    @classmethod
    def send(cls, conn: WebSocketEventBroadcaster, message: bytes) -> None:
        ...
    
    @classmethod
    def broadcast(cls, **kwargs): # -> None:
        ...
    


class ClientConnection(WebSocketEventBroadcaster):
    connections: ClassVar[set] = ...


class Flows(RequestHandler):
    def get(self): # -> None:
        ...
    


class DumpFlows(RequestHandler):
    def get(self) -> None:
        ...
    
    async def post(self): # -> None:
        ...
    


class ClearAll(RequestHandler):
    def post(self): # -> None:
        ...
    


class ResumeFlows(RequestHandler):
    def post(self): # -> None:
        ...
    


class KillFlows(RequestHandler):
    def post(self): # -> None:
        ...
    


class ResumeFlow(RequestHandler):
    def post(self, flow_id): # -> None:
        ...
    


class KillFlow(RequestHandler):
    def post(self, flow_id): # -> None:
        ...
    


class FlowHandler(RequestHandler):
    def delete(self, flow_id): # -> None:
        ...
    
    def put(self, flow_id) -> None:
        ...
    


class DuplicateFlow(RequestHandler):
    def post(self, flow_id): # -> None:
        ...
    


class RevertFlow(RequestHandler):
    def post(self, flow_id): # -> None:
        ...
    


class ReplayFlow(RequestHandler):
    def post(self, flow_id): # -> None:
        ...
    


class FlowContent(RequestHandler):
    def post(self, flow_id, message): # -> None:
        ...
    
    def get(self, flow_id, message): # -> None:
        ...
    


class FlowContentView(RequestHandler):
    def message_to_json(self, viewname: str, message: http.Message | TCPMessage | UDPMessage | WebSocketMessage, flow: HTTPFlow | TCPFlow | UDPFlow, max_lines: int | None = ...): # -> dict[str, list[list[tuple[Literal['error'], Literal['content missing']]]] | str]:
        ...
    
    def get(self, flow_id, message, content_view) -> None:
        ...
    


class Commands(RequestHandler):
    def get(self) -> None:
        ...
    


class ExecuteCommand(RequestHandler):
    def post(self, cmd: str): # -> None:
        ...
    


class Events(RequestHandler):
    def get(self): # -> None:
        ...
    


class Options(RequestHandler):
    def get(self): # -> None:
        ...
    
    def put(self): # -> None:
        ...
    


class SaveOptions(RequestHandler):
    def post(self): # -> None:
        ...
    


class DnsRebind(RequestHandler):
    def get(self):
        ...
    


class State(RequestHandler):
    @staticmethod
    def get_json(master: mitmproxy.tools.web.master.WebMaster): # -> dict[str, Unknown]:
        ...
    
    def get(self): # -> None:
        ...
    


class ProcessList(RequestHandler):
    @staticmethod
    def get_json(): # -> list[dict[str, Unknown]]:
        ...
    
    def get(self): # -> None:
        ...
    


class ProcessImage(RequestHandler):
    def get(self): # -> None:
        ...
    


class GZipContentAndFlowFiles(tornado.web.GZipContentEncoding):
    CONTENT_TYPES = ...


class Application(tornado.web.Application):
    master: mitmproxy.tools.web.master.WebMaster
    def __init__(self, master: mitmproxy.tools.web.master.WebMaster, debug: bool) -> None:
        ...
    


