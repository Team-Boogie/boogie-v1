"""
This type stub file was generated by pyright.
"""

import mitmproxy.flow
from collections.abc import Sequence
from dataclasses import dataclass
from typing import Any, ClassVar, TYPE_CHECKING

if TYPE_CHECKING:
    ...
class Hook:
    name: ClassVar[str]
    def args(self) -> list[Any]:
        ...
    
    def __new__(cls, *args, **kwargs): # -> Self@Hook:
        ...
    
    def __init_subclass__(cls, **kwargs): # -> None:
        ...
    


all_hooks: dict[str, type[Hook]] = ...
@dataclass
class ConfigureHook(Hook):
    """
    Called when configuration changes. The updated argument is a
    set-like object containing the keys of all changed options. This
    event is called during startup with all options in the updated set.
    """
    updated: set[str]
    ...


@dataclass
class DoneHook(Hook):
    """
    Called when the addon shuts down, either by being removed from
    the mitmproxy instance, or when mitmproxy itself shuts down. On
    shutdown, this event is called after the event loop is
    terminated, guaranteeing that it will be the final event an addon
    sees. Note that log handlers are shut down at this point, so
    calls to log functions will produce no output.
    """
    ...


@dataclass
class RunningHook(Hook):
    """
    Called when the proxy is completely up and running. At this point,
    you can expect all addons to be loaded and all options to be set.
    """
    ...


@dataclass
class UpdateHook(Hook):
    """
    Update is called when one or more flow objects have been modified,
    usually from a different addon.
    """
    flows: Sequence[mitmproxy.flow.Flow]
    ...


