"""
This type stub file was generated by pyright.
"""

import functools
import inspect
from collections.abc import Callable, Iterable, Sequence
from typing import Any, NamedTuple

"""
This module manages and invokes typed commands.
"""
def verify_arg_signature(f: Callable, args: Iterable[Any], kwargs: dict) -> None:
    ...

def typename(t: type) -> str:
    """
    Translates a type to an explanatory string.
    """
    ...

class CommandParameter(NamedTuple):
    name: str
    type: type
    kind: inspect._ParameterKind = ...
    def __str__(self) -> str:
        ...
    


class Command:
    name: str
    manager: CommandManager
    signature: inspect.Signature
    help: str | None
    def __init__(self, manager: CommandManager, name: str, func: Callable) -> None:
        ...
    
    @property
    def return_type(self) -> type | None:
        ...
    
    @property
    def parameters(self) -> list[CommandParameter]:
        """Returns a list of CommandParameters."""
        ...
    
    def signature_help(self) -> str:
        ...
    
    def prepare_args(self, args: Sequence[str]) -> inspect.BoundArguments:
        ...
    
    def call(self, args: Sequence[str]) -> Any:
        """
        Call the command with a list of arguments. At this point, all
        arguments are strings.
        """
        ...
    


class ParseResult(NamedTuple):
    value: str
    type: type
    valid: bool
    ...


class CommandManager:
    commands: dict[str, Command]
    def __init__(self, master) -> None:
        ...
    
    def collect_commands(self, addon): # -> None:
        ...
    
    def add(self, path: str, func: Callable): # -> None:
        ...
    
    @functools.lru_cache(maxsize=128)
    def parse_partial(self, cmdstr: str) -> tuple[Sequence[ParseResult], Sequence[CommandParameter]]:
        """
        Parse a possibly partial command. Return a sequence of ParseResults and a sequence of remainder type help items.
        """
        ...
    
    def call(self, command_name: str, *args: Any) -> Any:
        """
        Call a command with native arguments. May raise CommandError.
        """
        ...
    
    def call_strings(self, command_name: str, args: Sequence[str]) -> Any:
        """
        Call a command using a list of string arguments. May raise CommandError.
        """
        ...
    
    def execute(self, cmdstr: str) -> Any:
        """
        Execute a command string. May raise CommandError.
        """
        ...
    
    def dump(self, out=...) -> None:
        ...
    


def parsearg(manager: CommandManager, spec: str, argtype: type) -> Any:
    """
    Convert a string to a argument to the appropriate type.
    """
    ...

def command(name: str | None = ...): # -> (function: Unknown) -> _Wrapped[..., Unknown, (*args: Unknown, **kwargs: Unknown), Unknown]:
    ...

def argument(name, type): # -> (f: FunctionType) -> FunctionType:
    """
    Set the type of a command argument at runtime. This is useful for more
    specific types such as mitmproxy.types.Choice, which we cannot annotate
    directly as mypy does not like that.
    """
    ...

