"""
This type stub file was generated by pyright.
"""

import logging
import typing
from dataclasses import dataclass
from mitmproxy import hooks, master

if typing.TYPE_CHECKING:
    ...
ALERT = ...
LogLevels = ...
LOG_COLORS = ...
class MitmFormatter(logging.Formatter):
    def __init__(self, colorize: bool) -> None:
        ...
    
    default_time_format = ...
    default_msec_format = ...
    def format(self, record: logging.LogRecord) -> str:
        ...
    


class MitmLogHandler(logging.Handler):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def filter(self, record: logging.LogRecord) -> bool:
        ...
    
    def install(self) -> None:
        ...
    
    def uninstall(self) -> None:
        ...
    


class LogEntry:
    def __init__(self, msg, level) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Log:
    """
    The central logger, exposed to scripts as mitmproxy.ctx.log.

    Deprecated: Please use the standard Python logging module instead.
    """
    def __init__(self, master) -> None:
        ...
    
    def debug(self, txt): # -> None:
        """
        Log with level debug.
        """
        ...
    
    def info(self, txt): # -> None:
        """
        Log with level info.
        """
        ...
    
    def alert(self, txt): # -> None:
        """
        Log with level alert. Alerts have the same urgency as info, but
        signals to interactive tools that the user's attention should be
        drawn to the output even if they're not currently looking at the
        event log.
        """
        ...
    
    def warn(self, txt): # -> None:
        """
        Log with level warn.
        """
        ...
    
    def error(self, txt): # -> None:
        """
        Log with level error.
        """
        ...
    
    def __call__(self, text, level=...): # -> None:
        ...
    


LOGGING_LEVELS_TO_LOGENTRY = ...
class LegacyLogEvents(MitmLogHandler):
    """Emit deprecated `add_log` events from stdlib logging."""
    def __init__(self, master: master.Master) -> None:
        ...
    
    def emit(self, record: logging.LogRecord) -> None:
        ...
    


@dataclass
class AddLogHook(hooks.Hook):
    """
    **Deprecated:** Starting with mitmproxy 9, users should use the standard Python logging module instead, for example
    by calling `logging.getLogger().addHandler()`.

    Called whenever a new log entry is created through the mitmproxy
    context. Be careful not to log from this event, which will cause an
    infinite loop!
    """
    entry: LogEntry
    ...


def log_tier(level): # -> int | None:
    """
    Comparison method for "old" LogEntry log tiers.
    Ideally you should use the standard Python logging module instead.
    """
    ...

