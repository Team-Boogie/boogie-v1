"""
This type stub file was generated by pyright.
"""

import types
import mitmproxy.types as mtypes
from collections.abc import Sequence
from mitmproxy import command, flow

logger = ...
def load_script(path: str) -> types.ModuleType | None:
    ...

def script_error_handler(path: str, exc: Exception) -> None:
    """
    Log errors during script loading.
    """
    ...

ReloadInterval = ...
class Script:
    """
    An addon that manages a single script.
    """
    def __init__(self, path: str, reload: bool) -> None:
        ...
    
    def running(self): # -> None:
        ...
    
    def done(self): # -> None:
        ...
    
    @property
    def addons(self): # -> list[ModuleType]:
        ...
    
    def loadscript(self): # -> None:
        ...
    
    async def watcher(self): # -> None:
        ...
    


class ScriptLoader:
    """
    An addon that manages loading scripts from options.
    """
    def __init__(self) -> None:
        ...
    
    def load(self, loader): # -> None:
        ...
    
    def running(self): # -> None:
        ...
    
    @command.command("script.run")
    def script_run(self, flows: Sequence[flow.Flow], path: mtypes.Path) -> None:
        """
        Run a script on the specified flows. The script is configured with
        the current options and all lifecycle events for each flow are
        simulated. Note that the load event is not invoked.
        """
        ...
    
    def configure(self, updated): # -> None:
        ...
    


