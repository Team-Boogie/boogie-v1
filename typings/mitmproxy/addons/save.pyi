"""
This type stub file was generated by pyright.
"""

import mitmproxy.types
from collections.abc import Sequence
from pathlib import Path
from mitmproxy import command, dns, flow, http, tcp, udp

class Save:
    def __init__(self) -> None:
        ...
    
    def load(self, loader): # -> None:
        ...
    
    def configure(self, updated): # -> None:
        ...
    
    def maybe_rotate_to_new_file(self) -> None:
        ...
    
    def save_flow(self, flow: flow.Flow) -> None:
        """
        Write the flow to the stream, but first check if we need to rotate to a new file.
        """
        ...
    
    def done(self) -> None:
        ...
    
    @command.command("save.file")
    def save(self, flows: Sequence[flow.Flow], path: mitmproxy.types.Path) -> None:
        """
        Save flows to a file. If the path starts with a +, flows are
        appended to the file, otherwise it is over-written.
        """
        ...
    
    def tcp_start(self, flow: tcp.TCPFlow): # -> None:
        ...
    
    def tcp_end(self, flow: tcp.TCPFlow): # -> None:
        ...
    
    def tcp_error(self, flow: tcp.TCPFlow): # -> None:
        ...
    
    def udp_start(self, flow: udp.UDPFlow): # -> None:
        ...
    
    def udp_end(self, flow: udp.UDPFlow): # -> None:
        ...
    
    def udp_error(self, flow: udp.UDPFlow): # -> None:
        ...
    
    def websocket_end(self, flow: http.HTTPFlow): # -> None:
        ...
    
    def request(self, flow: http.HTTPFlow): # -> None:
        ...
    
    def response(self, flow: http.HTTPFlow): # -> None:
        ...
    
    def error(self, flow: http.HTTPFlow): # -> None:
        ...
    
    def dns_request(self, flow: dns.DNSFlow): # -> None:
        ...
    
    def dns_response(self, flow: dns.DNSFlow): # -> None:
        ...
    
    def dns_error(self, flow: dns.DNSFlow): # -> None:
        ...
    


