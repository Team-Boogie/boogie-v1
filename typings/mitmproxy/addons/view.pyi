"""
This type stub file was generated by pyright.
"""

import collections
import mitmproxy.flow
from collections.abc import Iterator, Sequence
from typing import Any
from mitmproxy import command, flowfilter

"""
The View:

- Keeps track of a store of flows
- Maintains a filtered, ordered view onto that list of flows
- Exposes a number of signals so the view can be monitored
- Tracks focus within the view
- Exposes a settings store for flows that automatically expires if the flow is
  removed from the store.
"""
class _OrderKey:
    def __init__(self, view) -> None:
        ...
    
    def generate(self, f: mitmproxy.flow.Flow) -> Any:
        ...
    
    def refresh(self, f): # -> None:
        ...
    
    def __call__(self, f): # -> Any:
        ...
    


class OrderRequestStart(_OrderKey):
    def generate(self, f: mitmproxy.flow.Flow) -> float:
        ...
    


class OrderRequestMethod(_OrderKey):
    def generate(self, f: mitmproxy.flow.Flow) -> str:
        ...
    


class OrderRequestURL(_OrderKey):
    def generate(self, f: mitmproxy.flow.Flow) -> str:
        ...
    


class OrderKeySize(_OrderKey):
    def generate(self, f: mitmproxy.flow.Flow) -> int:
        ...
    


orders = ...
class View(collections.abc.Sequence):
    def __init__(self) -> None:
        ...
    
    def load(self, loader): # -> None:
        ...
    
    def store_count(self): # -> int:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __getitem__(self, offset) -> Any:
        ...
    
    def index(self, f: mitmproxy.flow.Flow, start: int = ..., stop: int | None = ...) -> int:
        ...
    
    def __contains__(self, f: Any) -> bool:
        ...
    
    @command.command("view.focus.go")
    def go(self, offset: int) -> None:
        """
        Go to a specified offset. Positive offests are from the beginning of
        the view, negative from the end of the view, so that 0 is the first
        flow, -1 is the last flow.
        """
        ...
    
    @command.command("view.focus.next")
    def focus_next(self) -> None:
        """
        Set focus to the next flow.
        """
        ...
    
    @command.command("view.focus.prev")
    def focus_prev(self) -> None:
        """
        Set focus to the previous flow.
        """
        ...
    
    @command.command("view.order.options")
    def order_options(self) -> Sequence[str]:
        """
        Choices supported by the view_order option.
        """
        ...
    
    @command.command("view.order.reverse")
    def set_reversed(self, boolean: bool) -> None:
        ...
    
    @command.command("view.order.set")
    def set_order(self, order_key: str) -> None:
        """
        Sets the current view order.
        """
        ...
    
    @command.command("view.order")
    def get_order(self) -> str:
        """
        Returns the current view order.
        """
        ...
    
    @command.command("view.filter.set")
    def set_filter_cmd(self, filter_expr: str) -> None:
        """
        Sets the current view filter.
        """
        ...
    
    def set_filter(self, flt: flowfilter.TFilter | None): # -> None:
        ...
    
    @command.command("view.clear")
    def clear(self) -> None:
        """
        Clears both the store and view.
        """
        ...
    
    @command.command("view.clear_unmarked")
    def clear_not_marked(self) -> None:
        """
        Clears only the unmarked flows.
        """
        ...
    
    @command.command("view.settings.getval")
    def getvalue(self, flow: mitmproxy.flow.Flow, key: str, default: str) -> str:
        """
        Get a value from the settings store for the specified flow.
        """
        ...
    
    @command.command("view.settings.setval.toggle")
    def setvalue_toggle(self, flows: Sequence[mitmproxy.flow.Flow], key: str) -> None:
        """
        Toggle a boolean value in the settings store, setting the value to
        the string "true" or "false".
        """
        ...
    
    @command.command("view.settings.setval")
    def setvalue(self, flows: Sequence[mitmproxy.flow.Flow], key: str, value: str) -> None:
        """
        Set a value in the settings store for the specified flows.
        """
        ...
    
    @command.command("view.flows.duplicate")
    def duplicate(self, flows: Sequence[mitmproxy.flow.Flow]) -> None:
        """
        Duplicates the specified flows, and sets the focus to the first
        duplicate.
        """
        ...
    
    @command.command("view.flows.remove")
    def remove(self, flows: Sequence[mitmproxy.flow.Flow]) -> None:
        """
        Removes the flow from the underlying store and the view.
        """
        ...
    
    @command.command("view.flows.resolve")
    def resolve(self, flow_spec: str) -> Sequence[mitmproxy.flow.Flow]:
        """
        Resolve a flow list specification to an actual list of flows.
        """
        ...
    
    @command.command("view.flows.create")
    def create(self, method: str, url: str) -> None:
        ...
    
    @command.command("view.flows.load")
    def load_file(self, path: mitmproxy.types.Path) -> None:
        """
        Load flows into the view, without processing them with addons.
        """
        ...
    
    def add(self, flows: Sequence[mitmproxy.flow.Flow]) -> None:
        """
        Adds a flow to the state. If the flow already exists, it is
        ignored.
        """
        ...
    
    def get_by_id(self, flow_id: str) -> mitmproxy.flow.Flow | None:
        """
        Get flow with the given id from the store.
        Returns None if the flow is not found.
        """
        ...
    
    @command.command("view.properties.length")
    def get_length(self) -> int:
        """
        Returns view length.
        """
        ...
    
    @command.command("view.properties.marked")
    def get_marked(self) -> bool:
        """
        Returns true if view is in marked mode.
        """
        ...
    
    @command.command("view.properties.marked.toggle")
    def toggle_marked(self) -> None:
        """
        Toggle whether to show marked views only.
        """
        ...
    
    @command.command("view.properties.inbounds")
    def inbounds(self, index: int) -> bool:
        """
        Is this 0 <= index < len(self)?
        """
        ...
    
    def configure(self, updated): # -> None:
        ...
    
    def requestheaders(self, f): # -> None:
        ...
    
    def error(self, f): # -> None:
        ...
    
    def response(self, f): # -> None:
        ...
    
    def intercept(self, f): # -> None:
        ...
    
    def resume(self, f): # -> None:
        ...
    
    def kill(self, f): # -> None:
        ...
    
    def tcp_start(self, f): # -> None:
        ...
    
    def tcp_message(self, f): # -> None:
        ...
    
    def tcp_error(self, f): # -> None:
        ...
    
    def tcp_end(self, f): # -> None:
        ...
    
    def udp_start(self, f): # -> None:
        ...
    
    def udp_message(self, f): # -> None:
        ...
    
    def udp_error(self, f): # -> None:
        ...
    
    def udp_end(self, f): # -> None:
        ...
    
    def dns_request(self, f): # -> None:
        ...
    
    def dns_response(self, f): # -> None:
        ...
    
    def dns_error(self, f): # -> None:
        ...
    
    def update(self, flows: Sequence[mitmproxy.flow.Flow]) -> None:
        """
        Updates a list of flows. If flow is not in the state, it's ignored.
        """
        ...
    


class Focus:
    """
    Tracks a focus element within a View.
    """
    def __init__(self, v: View) -> None:
        ...
    
    @property
    def flow(self) -> mitmproxy.flow.Flow | None:
        ...
    
    @flow.setter
    def flow(self, f: mitmproxy.flow.Flow | None): # -> None:
        ...
    
    @property
    def index(self) -> int | None:
        ...
    
    @index.setter
    def index(self, idx): # -> None:
        ...
    


class Settings(collections.abc.Mapping):
    def __init__(self, view: View) -> None:
        ...
    
    def __iter__(self) -> Iterator:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __getitem__(self, f: mitmproxy.flow.Flow) -> dict:
        ...
    


