"""
This type stub file was generated by pyright.
"""

import mitmproxy.types
from collections.abc import Callable, Sequence
from mitmproxy import command, flow, http

def cleanup_request(f: flow.Flow) -> http.Request:
    ...

def pop_headers(request: http.Request) -> http.Request:
    ...

def cleanup_response(f: flow.Flow) -> http.Response:
    ...

def request_content_for_console(request: http.Request) -> str:
    ...

def curl_command(f: flow.Flow) -> str:
    ...

def httpie_command(f: flow.Flow) -> str:
    ...

def raw_request(f: flow.Flow) -> bytes:
    ...

def raw_response(f: flow.Flow) -> bytes:
    ...

def raw(f: flow.Flow, separator=...) -> bytes:
    """Return either the request or response if only one exists, otherwise return both"""
    ...

formats: dict[str, Callable[[flow.Flow], str | bytes]] = ...
class Export:
    def load(self, loader): # -> None:
        ...
    
    @command.command("export.formats")
    def formats(self) -> Sequence[str]:
        """
        Return a list of the supported export formats.
        """
        ...
    
    @command.command("export.file")
    def file(self, format: str, flow: flow.Flow, path: mitmproxy.types.Path) -> None:
        """
        Export a flow to path.
        """
        ...
    
    @command.command("export.clip")
    def clip(self, format: str, f: flow.Flow) -> None:
        """
        Export a flow to the system clipboard.
        """
        ...
    
    @command.command("export")
    def export_str(self, format: str, f: flow.Flow) -> str:
        """
        Export a flow and return the result.
        """
        ...
    


