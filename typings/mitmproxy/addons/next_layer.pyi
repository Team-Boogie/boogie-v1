"""
This type stub file was generated by pyright.
"""

import re
import sys
from collections.abc import Sequence
from mitmproxy.proxy import layer
from mitmproxy.proxy.context import Context
from mitmproxy.proxy.layer import Layer

"""
This addon determines the next protocol layer in our proxy stack.
Whenever a protocol layer in the proxy wants to pass a connection to a child layer and isn't sure which protocol comes
next, it calls the `next_layer` hook, which ends up here.
For example, if mitmproxy runs as a regular proxy, we first need to determine if
new clients start with a TLS handshake right away (Secure Web Proxy) or send a plaintext HTTP CONNECT request.
This addon here peeks at the incoming bytes and then makes a decision based on proxy mode, mitmproxy options, etc.

For a typical HTTPS request, this addon is called a couple of times: First to determine that we start with an HTTP layer
which processes the `CONNECT` request, a second time to determine that the client then starts negotiating TLS, and a
third time when we check if the protocol within that TLS stream is actually HTTP or something else.

Sometimes it's useful to hardcode specific logic in next_layer when one wants to do fancy things.
In that case it's not necessary to modify mitmproxy's source, adding a custom addon with a next_layer event hook
that sets nextlayer.layer works just as well.
"""
if sys.version_info < (3, 11):
    ...
else:
    ...
logger = ...
def stack_match(context: Context, layers: Sequence[type[Layer] | tuple[type[Layer], ...]]) -> bool:
    ...

class NeedsMoreData(Exception):
    """Signal that the decision on which layer to put next needs to be deferred within the NextLayer addon."""
    ...


class NextLayer:
    ignore_hosts: Sequence[re.Pattern] = ...
    allow_hosts: Sequence[re.Pattern] = ...
    tcp_hosts: Sequence[re.Pattern] = ...
    udp_hosts: Sequence[re.Pattern] = ...
    def configure(self, updated): # -> None:
        ...
    
    def next_layer(self, nextlayer: layer.NextLayer): # -> None:
        ...
    


KNOWN_QUIC_VERSIONS = ...
TYPICAL_QUIC_PORTS = ...
