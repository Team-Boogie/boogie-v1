"""
This type stub file was generated by pyright.
"""

import asyncio
import mitmproxy.types
from collections.abc import Sequence
from types import TracebackType
from typing import Literal
from mitmproxy import command, flow, http
from mitmproxy.options import Options
from mitmproxy.proxy import commands, layers, server
from mitmproxy.proxy.context import Context

logger = ...
class MockServer(layers.http.HttpConnection):
    """
    A mock HTTP "server" that just pretends it received a full HTTP request,
    which is then processed by the proxy core.
    """
    flow: http.HTTPFlow
    def __init__(self, flow: http.HTTPFlow, context: Context) -> None:
        ...
    


class ReplayHandler(server.ConnectionHandler):
    layer: layers.HttpLayer
    def __init__(self, flow: http.HTTPFlow, options: Options) -> None:
        ...
    
    async def replay(self) -> None:
        ...
    
    def log(self, message: str, level: int = ..., exc_info: Literal[True] | tuple[type[BaseException] | None, BaseException | None, TracebackType | None] | None = ...) -> None:
        ...
    
    async def handle_hook(self, hook: commands.StartHook) -> None:
        ...
    


class ClientPlayback:
    playback_task: asyncio.Task | None = ...
    inflight: http.HTTPFlow | None
    queue: asyncio.Queue
    options: Options
    replay_tasks: set[asyncio.Task]
    def __init__(self) -> None:
        ...
    
    def running(self): # -> None:
        ...
    
    async def done(self): # -> None:
        ...
    
    async def playback(self):
        ...
    
    def check(self, f: flow.Flow) -> str | None:
        ...
    
    def load(self, loader): # -> None:
        ...
    
    def configure(self, updated): # -> None:
        ...
    
    @command.command("replay.client.count")
    def count(self) -> int:
        """
        Approximate number of flows queued for replay.
        """
        ...
    
    @command.command("replay.client.stop")
    def stop_replay(self) -> None:
        """
        Clear the replay queue.
        """
        ...
    
    @command.command("replay.client")
    def start_replay(self, flows: Sequence[flow.Flow]) -> None:
        """
        Add flows to the replay queue, skipping flows that can't be replayed.
        """
        ...
    
    @command.command("replay.client.file")
    def load_file(self, path: mitmproxy.types.Path) -> None:
        """
        Load flows from file, and add them to the replay queue.
        """
        ...
    


