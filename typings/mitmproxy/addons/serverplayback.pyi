"""
This type stub file was generated by pyright.
"""

import mitmproxy.types
from collections.abc import Hashable, Sequence
from mitmproxy import command, flow, http

logger = ...
HASH_OPTIONS = ...
class ServerPlayback:
    flowmap: dict[Hashable, list[http.HTTPFlow]]
    configured: bool
    def __init__(self) -> None:
        ...
    
    def load(self, loader): # -> None:
        ...
    
    @command.command("replay.server")
    def load_flows(self, flows: Sequence[flow.Flow]) -> None:
        """
        Replay server responses from flows.
        """
        ...
    
    @command.command("replay.server.add")
    def add_flows(self, flows: Sequence[flow.Flow]) -> None:
        """
        Add responses from flows to server replay list.
        """
        ...
    
    @command.command("replay.server.file")
    def load_file(self, path: mitmproxy.types.Path) -> None:
        ...
    
    @command.command("replay.server.stop")
    def clear(self) -> None:
        """
        Stop server replay.
        """
        ...
    
    @command.command("replay.server.count")
    def count(self) -> int:
        ...
    
    def next_flow(self, flow: http.HTTPFlow) -> http.HTTPFlow | None:
        """
        Returns the next flow object, or None if no matching flow was
        found.
        """
        ...
    
    def configure(self, updated): # -> None:
        ...
    
    def recompute_hashes(self) -> None:
        """
        Rebuild flowmap if the hashing method has changed during execution,
        see https://github.com/mitmproxy/mitmproxy/issues/4506
        """
        ...
    
    def request(self, f: http.HTTPFlow) -> None:
        ...
    


