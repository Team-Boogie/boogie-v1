"""
This type stub file was generated by pyright.
"""

import ldap3
from abc import ABC, abstractmethod
from mitmproxy import http
from mitmproxy.proxy.layers import modes

REALM = ...
class ProxyAuth:
    validator: Validator | None = ...
    def __init__(self) -> None:
        ...
    
    def load(self, loader): # -> None:
        ...
    
    def configure(self, updated): # -> None:
        ...
    
    def socks5_auth(self, data: modes.Socks5AuthData) -> None:
        ...
    
    def http_connect(self, f: http.HTTPFlow) -> None:
        ...
    
    def requestheaders(self, f: http.HTTPFlow) -> None:
        ...
    
    def authenticate_http(self, f: http.HTTPFlow) -> bool:
        """
        Authenticate an HTTP request, returns if authentication was successful.

        If valid credentials are found, the matching authentication header is removed.
        In no or invalid credentials are found, flow.response is set to an error page.
        """
        ...
    


def make_auth_required_response(is_proxy: bool) -> http.Response:
    ...

def http_auth_header(is_proxy: bool) -> str:
    ...

def is_http_proxy(f: http.HTTPFlow) -> bool:
    """
    Returns:
        - True, if authentication is done as if mitmproxy is a proxy
        - False, if authentication is done as if mitmproxy is an HTTP server
    """
    ...

def mkauth(username: str, password: str, scheme: str = ...) -> str:
    """
    Craft a basic auth string
    """
    ...

def parse_http_basic_auth(s: str) -> tuple[str, str, str]:
    """
    Parse a basic auth header.
    Raises a ValueError if the input is invalid.
    """
    ...

class Validator(ABC):
    """Base class for all username/password validators."""
    @abstractmethod
    def __call__(self, username: str, password: str) -> bool:
        ...
    


class AcceptAll(Validator):
    def __call__(self, username: str, password: str) -> bool:
        ...
    


class SingleUser(Validator):
    def __init__(self, proxyauth: str) -> None:
        ...
    
    def __call__(self, username: str, password: str) -> bool:
        ...
    


class Htpasswd(Validator):
    def __init__(self, proxyauth: str) -> None:
        ...
    
    def __call__(self, username: str, password: str) -> bool:
        ...
    


class Ldap(Validator):
    conn: ldap3.Connection
    server: ldap3.Server
    dn_subtree: str
    filter_key: str
    def __init__(self, proxyauth: str) -> None:
        ...
    
    @staticmethod
    def parse_spec(spec: str) -> tuple[bool, str, int | None, str, str, str, str]:
        ...
    
    def __call__(self, username: str, password: str) -> bool:
        ...
    


