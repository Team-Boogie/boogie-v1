"""
This type stub file was generated by pyright.
"""

import sys
from abc import ABCMeta
from collections.abc import Callable
from dataclasses import dataclass
from mitmproxy import connection
from mitmproxy.proxy import events, layer
from mitmproxy.proxy.commands import StartHook
from mitmproxy.proxy.utils import expect

if sys.version_info < (3, 11):
    ...
else:
    ...
class HttpProxy(layer.Layer):
    ...


class HttpUpstreamProxy(layer.Layer):
    ...


class DestinationKnown(layer.Layer, metaclass=ABCMeta):
    """Base layer for layers that gather connection destination info and then delegate."""
    child_layer: layer.Layer
    def finish_start(self) -> layer.CommandGenerator[str | None]:
        ...
    
    @expect(events.DataReceived, events.ConnectionClosed)
    def done(self, _) -> layer.CommandGenerator[None]:
        ...
    


class ReverseProxy(DestinationKnown):
    ...


class TransparentProxy(DestinationKnown):
    ...


SOCKS5_VERSION = ...
SOCKS5_METHOD_NO_AUTHENTICATION_REQUIRED = ...
SOCKS5_METHOD_USER_PASSWORD_AUTHENTICATION = ...
SOCKS5_METHOD_NO_ACCEPTABLE_METHODS = ...
SOCKS5_ATYP_IPV4_ADDRESS = ...
SOCKS5_ATYP_DOMAINNAME = ...
SOCKS5_ATYP_IPV6_ADDRESS = ...
SOCKS5_REP_HOST_UNREACHABLE = ...
SOCKS5_REP_COMMAND_NOT_SUPPORTED = ...
SOCKS5_REP_ADDRESS_TYPE_NOT_SUPPORTED = ...
@dataclass
class Socks5AuthData:
    client_conn: connection.Client
    username: str
    password: str
    valid: bool = ...


@dataclass
class Socks5AuthHook(StartHook):
    """
    Mitmproxy has received username/password SOCKS5 credentials.

    This hook decides whether they are valid by setting `data.valid`.
    """
    data: Socks5AuthData
    ...


class Socks5Proxy(DestinationKnown):
    buf: bytes = ...
    def socks_err(self, message: str, reply_code: int | None = ...) -> layer.CommandGenerator[None]:
        ...
    
    def state_greet(self) -> layer.CommandGenerator[None]:
        ...
    
    state: Callable[..., layer.CommandGenerator[None]] = ...
    def state_auth(self) -> layer.CommandGenerator[None]:
        ...
    
    def state_connect(self) -> layer.CommandGenerator[None]:
        ...
    


