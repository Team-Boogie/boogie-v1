"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from mitmproxy import flow, udp
from mitmproxy.proxy import events, layer
from mitmproxy.proxy.commands import StartHook
from mitmproxy.proxy.context import Context
from mitmproxy.proxy.events import MessageInjected
from mitmproxy.proxy.utils import expect

@dataclass
class UdpStartHook(StartHook):
    """
    A UDP connection has started.
    """
    flow: udp.UDPFlow
    ...


@dataclass
class UdpMessageHook(StartHook):
    """
    A UDP connection has received a message. The most recent message
    will be flow.messages[-1]. The message is user-modifiable.
    """
    flow: udp.UDPFlow
    ...


@dataclass
class UdpEndHook(StartHook):
    """
    A UDP connection has ended.
    """
    flow: udp.UDPFlow
    ...


@dataclass
class UdpErrorHook(StartHook):
    """
    A UDP error has occurred.

    Every UDP flow will receive either a udp_error or a udp_end event, but not both.
    """
    flow: udp.UDPFlow
    ...


class UdpMessageInjected(MessageInjected[udp.UDPMessage]):
    """
    The user has injected a custom UDP message.
    """
    ...


class UDPLayer(layer.Layer):
    """
    Simple UDP layer that just relays messages right now.
    """
    flow: udp.UDPFlow | None
    def __init__(self, context: Context, ignore: bool = ...) -> None:
        ...
    
    @expect(events.Start)
    def start(self, _) -> layer.CommandGenerator[None]:
        ...
    
    _handle_event = ...
    @expect(events.DataReceived, events.ConnectionClosed, UdpMessageInjected)
    def relay_messages(self, event: events.Event) -> layer.CommandGenerator[None]:
        ...
    
    @expect(events.DataReceived, events.ConnectionClosed, UdpMessageInjected)
    def done(self, _) -> layer.CommandGenerator[None]:
        ...
    


