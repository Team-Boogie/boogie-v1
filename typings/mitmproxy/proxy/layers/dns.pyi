"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import List, Literal
from mitmproxy import dns
from mitmproxy.proxy import commands, events, layer
from mitmproxy.proxy.context import Context
from mitmproxy.proxy.utils import expect

_LENGTH_LABEL = ...
@dataclass
class DnsRequestHook(commands.StartHook):
    """
    A DNS query has been received.
    """
    flow: dns.DNSFlow
    ...


@dataclass
class DnsResponseHook(commands.StartHook):
    """
    A DNS response has been received or set.
    """
    flow: dns.DNSFlow
    ...


@dataclass
class DnsErrorHook(commands.StartHook):
    """
    A DNS error has occurred.
    """
    flow: dns.DNSFlow
    ...


def pack_message(message: dns.Message, transport_protocol: Literal["tcp", "udp"]) -> bytes:
    ...

class DNSLayer(layer.Layer):
    """
    Layer that handles resolving DNS queries.
    """
    flows: dict[int, dns.DNSFlow]
    req_buf: bytearray
    resp_buf: bytearray
    def __init__(self, context: Context) -> None:
        ...
    
    def handle_request(self, flow: dns.DNSFlow, msg: dns.Message) -> layer.CommandGenerator[None]:
        ...
    
    def handle_response(self, flow: dns.DNSFlow, msg: dns.Message) -> layer.CommandGenerator[None]:
        ...
    
    def handle_error(self, flow: dns.DNSFlow, err: str) -> layer.CommandGenerator[None]:
        ...
    
    def unpack_message(self, data: bytes, from_client: bool) -> List[dns.Message]:
        ...
    
    @expect(events.Start)
    def state_start(self, _) -> layer.CommandGenerator[None]:
        ...
    
    @expect(events.DataReceived, events.ConnectionClosed)
    def state_query(self, event: events.Event) -> layer.CommandGenerator[None]:
        ...
    
    @expect(events.DataReceived, events.ConnectionClosed)
    def state_done(self, _) -> layer.CommandGenerator[None]:
        ...
    
    _handle_event = ...


