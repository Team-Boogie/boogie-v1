"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from aioquic.h3.events import HeadersReceived
from . import RequestData, RequestEndOfMessage, RequestHeaders, RequestProtocolError, RequestTrailers, ResponseData, ResponseEndOfMessage, ResponseHeaders, ResponseProtocolError, ResponseTrailers
from ._base import HttpConnection, HttpEvent
from ._http_h3 import LayeredH3Connection
from mitmproxy import connection
from mitmproxy.proxy import context, layer
from mitmproxy.proxy.layers.quic import QuicConnectionClosed, QuicStreamEvent
from mitmproxy.proxy.utils import expect

class Http3Connection(HttpConnection):
    h3_conn: LayeredH3Connection
    ReceiveData: type[RequestData | ResponseData]
    ReceiveEndOfMessage: type[RequestEndOfMessage | ResponseEndOfMessage]
    ReceiveProtocolError: type[RequestProtocolError | ResponseProtocolError]
    ReceiveTrailers: type[RequestTrailers | ResponseTrailers]
    def __init__(self, context: context.Context, conn: connection.Connection) -> None:
        ...
    
    @expect(HttpEvent, QuicStreamEvent, QuicConnectionClosed)
    def done(self, _) -> layer.CommandGenerator[None]:
        ...
    
    @abstractmethod
    def parse_headers(self, event: HeadersReceived) -> RequestHeaders | ResponseHeaders:
        ...
    


class Http3Server(Http3Connection):
    ReceiveData = RequestData
    ReceiveEndOfMessage = RequestEndOfMessage
    ReceiveProtocolError = RequestProtocolError
    ReceiveTrailers = RequestTrailers
    def __init__(self, context: context.Context) -> None:
        ...
    
    def parse_headers(self, event: HeadersReceived) -> RequestHeaders | ResponseHeaders:
        ...
    


class Http3Client(Http3Connection):
    ReceiveData = ResponseData
    ReceiveEndOfMessage = ResponseEndOfMessage
    ReceiveProtocolError = ResponseProtocolError
    ReceiveTrailers = ResponseTrailers
    our_stream_id: dict[int, int]
    their_stream_id: dict[int, int]
    def __init__(self, context: context.Context) -> None:
        ...
    
    def parse_headers(self, event: HeadersReceived) -> RequestHeaders | ResponseHeaders:
        ...
    


__all__ = ["Http3Client", "Http3Server"]
