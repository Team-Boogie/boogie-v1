"""
This type stub file was generated by pyright.
"""

from mitmproxy import connection
from mitmproxy.connection import Connection
from mitmproxy.proxy import commands, context, events, layer

"""
This module contains the proxy layers for raw QUIC proxying.
This is used if we want to speak QUIC, but we do not want to do HTTP.
"""
class QuicStreamNextLayer(layer.NextLayer):
    """`NextLayer` variant that callbacks `QuicStreamLayer` after layer decision."""
    def __init__(self, context: context.Context, stream: QuicStreamLayer, ask_on_start: bool = ...) -> None:
        ...
    
    @property
    def layer(self) -> layer.Layer | None:
        ...
    
    @layer.setter
    def layer(self, value: layer.Layer | None) -> None:
        ...
    


class QuicStreamLayer(layer.Layer):
    """
    Layer for QUIC streams.
    Serves as a marker for NextLayer and keeps track of the connection states.
    """
    client: connection.Client
    server: connection.Server
    child_layer: layer.Layer
    def __init__(self, context: context.Context, force_raw: bool, stream_id: int) -> None:
        ...
    
    def open_server_stream(self, server_stream_id) -> None:
        ...
    
    def refresh_metadata(self) -> None:
        ...
    
    def stream_id(self, client: bool) -> int | None:
        ...
    


class RawQuicLayer(layer.Layer):
    """
    This layer is responsible for de-multiplexing QUIC streams into an individual layer stack per stream.
    """
    force_raw: bool
    datagram_layer: layer.Layer
    client_stream_ids: dict[int, QuicStreamLayer]
    server_stream_ids: dict[int, QuicStreamLayer]
    connections: dict[connection.Connection, layer.Layer]
    command_sources: dict[commands.Command, layer.Layer]
    next_stream_id: list[int]
    def __init__(self, context: context.Context, force_raw: bool = ...) -> None:
        ...
    
    def close_stream_layer(self, stream_layer: QuicStreamLayer, client: bool) -> layer.CommandGenerator[None]:
        """Closes the incoming part of a connection."""
        ...
    
    def event_to_child(self, child_layer: layer.Layer, event: events.Event) -> layer.CommandGenerator[None]:
        """Forwards events to child layers and translates commands."""
        ...
    
    def get_next_available_stream_id(self, is_client: bool, is_unidirectional: bool = ...) -> int:
        ...
    
    def done(self, _) -> layer.CommandGenerator[None]:
        ...
    


