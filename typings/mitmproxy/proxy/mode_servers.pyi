"""
This type stub file was generated by pyright.
"""

import asyncio
import sys
import typing
import mitmproxy_rs
from abc import ABCMeta, abstractmethod
from contextlib import contextmanager
from typing import ClassVar, Generic, Self, TYPE_CHECKING, TypeVar
from mitmproxy.connection import Address
from mitmproxy.proxy import commands, mode_specs, server
from mitmproxy.proxy.context import Context
from mitmproxy.proxy.layer import Layer
from mitmproxy.master import Master

"""
This module defines "server instances", which manage
the TCP/UDP servers spawned by mitmproxy as specified by the proxy mode.

Example:

    mode = ProxyMode.parse("reverse:https://example.com")
    inst = ServerInstance.make(mode, manager_that_handles_callbacks)
    await inst.start()
    # TCP server is running now.
"""
if sys.version_info < (3, 11):
    ...
else:
    ...
if TYPE_CHECKING:
    ...
logger = ...
class ProxyConnectionHandler(server.LiveConnectionHandler):
    master: Master
    def __init__(self, master, r, w, options, mode) -> None:
        ...
    
    async def handle_hook(self, hook: commands.StartHook) -> None:
        ...
    


M = TypeVar("M", bound=mode_specs.ProxyMode)
class ServerManager(typing.Protocol):
    connections: dict[tuple | str, ProxyConnectionHandler]
    @contextmanager
    def register_connection(self, connection_id: tuple | str, handler: ProxyConnectionHandler): # -> None:
        ...
    


class ServerInstance(Generic[M], metaclass=ABCMeta):
    __modes: ClassVar[dict[str, type[ServerInstance]]] = ...
    last_exception: Exception | None = ...
    def __init__(self, mode: M, manager: ServerManager) -> None:
        ...
    
    def __init_subclass__(cls, **kwargs): # -> None:
        """Register all subclasses so that make() finds them."""
        ...
    
    @classmethod
    def make(cls, mode: mode_specs.ProxyMode | str, manager: ServerManager) -> Self:
        ...
    
    @property
    @abstractmethod
    def is_running(self) -> bool:
        ...
    
    async def start(self) -> None:
        ...
    
    async def stop(self) -> None:
        ...
    
    @property
    @abstractmethod
    def listen_addrs(self) -> tuple[Address, ...]:
        ...
    
    @abstractmethod
    def make_top_layer(self, context: Context) -> Layer:
        ...
    
    def to_json(self) -> dict:
        ...
    
    async def handle_stream(self, reader: asyncio.StreamReader | mitmproxy_rs.Stream, writer: asyncio.StreamWriter | mitmproxy_rs.Stream | None = ...) -> None:
        ...
    


class AsyncioServerInstance(ServerInstance[M], metaclass=ABCMeta):
    _servers: list[asyncio.Server | mitmproxy_rs.udp.UdpServer]
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @property
    def is_running(self) -> bool:
        ...
    
    @property
    def listen_addrs(self) -> tuple[Address, ...]:
        ...
    
    async def listen(self, host: str, port: int) -> list[asyncio.Server | mitmproxy_rs.udp.UdpServer]:
        ...
    


class WireGuardServerInstance(ServerInstance[mode_specs.WireGuardMode]):
    _server: mitmproxy_rs.wireguard.WireGuardServer | None = ...
    server_key: str
    client_key: str
    def make_top_layer(self, context: Context) -> Layer:
        ...
    
    @property
    def is_running(self) -> bool:
        ...
    
    @property
    def listen_addrs(self) -> tuple[Address, ...]:
        ...
    
    def client_conf(self) -> str | None:
        ...
    
    def to_json(self) -> dict:
        ...
    


class LocalRedirectorInstance(ServerInstance[mode_specs.LocalMode]):
    _server: ClassVar[mitmproxy_rs.local.LocalRedirector | None] = ...
    _instance: ClassVar[LocalRedirectorInstance | None] = ...
    listen_addrs = ...
    @property
    def is_running(self) -> bool:
        ...
    
    def make_top_layer(self, context: Context) -> Layer:
        ...
    
    @classmethod
    async def redirector_handle_stream(cls, stream: mitmproxy_rs.Stream) -> None:
        ...
    


class RegularInstance(AsyncioServerInstance[mode_specs.RegularMode]):
    def make_top_layer(self, context: Context) -> Layer:
        ...
    


class UpstreamInstance(AsyncioServerInstance[mode_specs.UpstreamMode]):
    def make_top_layer(self, context: Context) -> Layer:
        ...
    


class TransparentInstance(AsyncioServerInstance[mode_specs.TransparentMode]):
    def make_top_layer(self, context: Context) -> Layer:
        ...
    


class ReverseInstance(AsyncioServerInstance[mode_specs.ReverseMode]):
    def make_top_layer(self, context: Context) -> Layer:
        ...
    


class Socks5Instance(AsyncioServerInstance[mode_specs.Socks5Mode]):
    def make_top_layer(self, context: Context) -> Layer:
        ...
    


class DnsInstance(AsyncioServerInstance[mode_specs.DnsMode]):
    def make_top_layer(self, context: Context) -> Layer:
        ...
    


class TunInstance(ServerInstance[mode_specs.TunMode]):
    _server: mitmproxy_rs.tun.TunInterface | None = ...
    listen_addrs = ...
    def make_top_layer(self, context: Context) -> Layer:
        ...
    
    @property
    def is_running(self) -> bool:
        ...
    
    @property
    def tun_name(self) -> str | None:
        ...
    
    def to_json(self) -> dict:
        ...
    


