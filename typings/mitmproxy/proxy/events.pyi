"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Generic, TypeVar
from mitmproxy import flow
from mitmproxy.connection import Connection
from mitmproxy.proxy import commands

"""
When IO actions occur at the proxy server, they are passed down to layers as events.
Events represent the only way for layers to receive new data from sockets.
The counterpart to events are commands.
"""
class Event:
    """
    Base class for all events.
    """
    def __repr__(self): # -> str:
        ...
    


class Start(Event):
    """
    Every layer initially receives a start event.
    This is useful to emit events on startup.
    """
    ...


@dataclass
class ConnectionEvent(Event):
    """
    All events involving connection IO.
    """
    connection: Connection
    ...


@dataclass
class DataReceived(ConnectionEvent):
    """
    Remote has sent some data.
    """
    data: bytes
    def __repr__(self): # -> str:
        ...
    


class ConnectionClosed(ConnectionEvent):
    """
    Remote has closed a connection.
    """
    ...


class CommandCompleted(Event):
    """
    Emitted when a command has been finished, e.g.
    when the master has replied or when we have established a server connection.
    """
    command: commands.Command
    reply: Any
    def __new__(cls, *args, **kwargs): # -> Self@CommandCompleted:
        ...
    
    def __init_subclass__(cls, **kwargs): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


command_reply_subclasses: dict[commands.Command, type[CommandCompleted]] = ...
@dataclass(repr=False)
class OpenConnectionCompleted(CommandCompleted):
    command: commands.OpenConnection
    reply: str | None
    ...


@dataclass(repr=False)
class HookCompleted(CommandCompleted):
    command: commands.StartHook
    reply: None = ...


T = TypeVar("T")
@dataclass
class MessageInjected(Event, Generic[T]):
    """
    The user has injected a custom WebSocket/TCP/... message.
    """
    flow: flow.Flow
    message: T
    ...


@dataclass
class Wakeup(CommandCompleted):
    """
    Event sent to layers that requested a wakeup using RequestWakeup.
    """
    command: commands.RequestWakeup
    ...


