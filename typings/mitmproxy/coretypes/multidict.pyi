"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta
from collections.abc import Iterator, MutableMapping
from typing import TypeVar
from mitmproxy.coretypes import serializable

KT = TypeVar("KT")
VT = TypeVar("VT")
class _MultiDict(MutableMapping[KT, VT], metaclass=ABCMeta):
    """
    A MultiDict is a dictionary-like data structure that supports multiple values per key.
    """
    fields: tuple[tuple[KT, VT], ...]
    def __repr__(self): # -> str:
        ...
    
    def __getitem__(self, key: KT) -> VT:
        ...
    
    def __setitem__(self, key: KT, value: VT) -> None:
        ...
    
    def __delitem__(self, key: KT) -> None:
        ...
    
    def __iter__(self) -> Iterator[KT]:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def get_all(self, key: KT) -> list[VT]:
        """
        Return the list of all values for a given key.
        If that key is not in the MultiDict, the return value will be an empty list.
        """
        ...
    
    def set_all(self, key: KT, values: list[VT]) -> None:
        """
        Remove the old values for a key and add new ones.
        """
        ...
    
    def add(self, key: KT, value: VT) -> None:
        """
        Add an additional value for the given key at the bottom.
        """
        ...
    
    def insert(self, index: int, key: KT, value: VT) -> None:
        """
        Insert an additional value for the given key at the specified position.
        """
        ...
    
    def keys(self, multi: bool = ...): # -> Generator[KT@_MultiDict, None, None]:
        """
        Get all keys.

        If `multi` is True, one key per value will be returned.
        If `multi` is False, duplicate keys will only be returned once.
        """
        ...
    
    def values(self, multi: bool = ...): # -> Generator[VT@_MultiDict, None, None]:
        """
        Get all values.

        If `multi` is True, all values will be returned.
        If `multi` is False, only the first value per key will be returned.
        """
        ...
    
    def items(self, multi: bool = ...): # -> tuple[tuple[KT@_MultiDict, VT@_MultiDict], ...] | ItemsView[KT@_MultiDict, VT@_MultiDict]:
        """
        Get all (key, value) tuples.

        If `multi` is True, all `(key, value)` pairs will be returned.
        If False, only one tuple per key is returned.
        """
        ...
    


class MultiDict(_MultiDict[KT, VT], serializable.Serializable):
    """A concrete MultiDict, storing its own data."""
    def __init__(self, fields=...) -> None:
        ...
    
    def get_state(self): # -> tuple[tuple[KT@MultiDict, VT@MultiDict], ...]:
        ...
    
    def set_state(self, state): # -> None:
        ...
    
    @classmethod
    def from_state(cls, state): # -> Self@MultiDict[KT@MultiDict, VT@MultiDict]:
        ...
    


class MultiDictView(_MultiDict[KT, VT]):
    """
    The MultiDictView provides the MultiDict interface over calculated data.
    The view itself contains no state - data is retrieved from the parent on
    request, and stored back to the parent on change.
    """
    def __init__(self, getter, setter) -> None:
        ...
    
    @property
    def fields(self):
        ...
    
    @fields.setter
    def fields(self, value): # -> None:
        ...
    
    def copy(self) -> MultiDict[KT, VT]:
        ...
    


