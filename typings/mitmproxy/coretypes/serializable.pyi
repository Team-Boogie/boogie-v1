"""
This type stub file was generated by pyright.
"""

import abc
import typing
from typing import TypeVar

T = TypeVar("T", bound="Serializable")
State = typing.Any
class Serializable(metaclass=abc.ABCMeta):
    """
    Abstract Base Class that defines an API to save an object's state and restore it later on.
    """
    @classmethod
    @abc.abstractmethod
    def from_state(cls: type[T], state) -> T:
        """
        Create a new object from the given state.
        Consumes the passed state.
        """
        ...
    
    @abc.abstractmethod
    def get_state(self) -> State:
        """
        Retrieve object state.
        """
        ...
    
    @abc.abstractmethod
    def set_state(self, state):
        """
        Set object state to the given state. Consumes the passed state.
        May return a `dataclasses.FrozenInstanceError` if the object is immutable.
        """
        ...
    
    def copy(self: T) -> T:
        ...
    


U = TypeVar("U", bound="SerializableDataclass")
class SerializableDataclass(Serializable):
    def get_state(self) -> State:
        ...
    
    @classmethod
    def from_state(cls: type[U], state) -> U:
        ...
    
    def set_state(self, state: State) -> None:
        ...
    


