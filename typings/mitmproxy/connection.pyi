"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta
from collections.abc import Sequence
from dataclasses import dataclass
from enum import Flag
from typing import Literal
from mitmproxy import certs
from mitmproxy.coretypes import serializable
from mitmproxy.net import server_spec
from mitmproxy.proxy import mode_specs

class ConnectionState(Flag):
    """The current state of the underlying socket."""
    CLOSED = ...
    CAN_READ = ...
    CAN_WRITE = ...
    OPEN = ...


TransportProtocol = Literal["tcp", "udp"]
TlsVersion = Literal["SSLv3", "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3", "DTLSv0.9", "DTLSv1", "DTLSv1.2", "QUICv1",]
Address = tuple[str, int]
kw_only = ...
@dataclass(**kw_only)
class Connection(serializable.SerializableDataclass, metaclass=ABCMeta):
    """
    Base class for client and server connections.

    The connection object only exposes metadata about the connection, but not the underlying socket object.
    This is intentional, all I/O should be handled by `mitmproxy.proxy.server` exclusively.
    """
    peername: Address | None
    sockname: Address | None
    state: ConnectionState = ...
    id: str = ...
    transport_protocol: TransportProtocol = ...
    error: str | None = ...
    tls: bool = ...
    certificate_list: Sequence[certs.Cert] = ...
    alpn: bytes | None = ...
    alpn_offers: Sequence[bytes] = ...
    cipher: str | None = ...
    cipher_list: Sequence[str] = ...
    tls_version: TlsVersion | None = ...
    sni: str | None = ...
    timestamp_start: float | None = ...
    timestamp_end: float | None = ...
    timestamp_tls_setup: float | None = ...
    @property
    def connected(self) -> bool:
        """*Read-only:* `True` if Connection.state is ConnectionState.OPEN, `False` otherwise."""
        ...
    
    @property
    def tls_established(self) -> bool:
        """*Read-only:* `True` if TLS has been established, `False` otherwise."""
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def alpn_proto_negotiated(self) -> bytes | None:
        """*Deprecated:* An outdated alias for Connection.alpn."""
        ...
    


@dataclass(eq=False, repr=False, **kw_only)
class Client(Connection):
    """A connection between a client and mitmproxy."""
    peername: Address
    sockname: Address
    mitmcert: certs.Cert | None = ...
    proxy_mode: mode_specs.ProxyMode = ...
    timestamp_start: float = ...
    def __str__(self) -> str:
        ...
    
    @property
    def address(self): # -> Address:
        """*Deprecated:* An outdated alias for Client.peername."""
        ...
    
    @address.setter
    def address(self, x): # -> None:
        ...
    
    @property
    def cipher_name(self) -> str | None:
        """*Deprecated:* An outdated alias for Connection.cipher."""
        ...
    
    @property
    def clientcert(self) -> certs.Cert | None:
        """*Deprecated:* An outdated alias for Connection.certificate_list[0]."""
        ...
    
    @clientcert.setter
    def clientcert(self, val): # -> None:
        ...
    


@dataclass(eq=False, repr=False, **kw_only)
class Server(Connection):
    """A connection between mitmproxy and an upstream server."""
    address: Address | None
    peername: Address | None = ...
    sockname: Address | None = ...
    timestamp_start: float | None = ...
    timestamp_tcp_setup: float | None = ...
    via: server_spec.ServerSpec | None = ...
    def __str__(self) -> str:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    @property
    def ip_address(self) -> Address | None:
        """*Deprecated:* An outdated alias for `Server.peername`."""
        ...
    
    @property
    def cert(self) -> certs.Cert | None:
        """*Deprecated:* An outdated alias for `Connection.certificate_list[0]`."""
        ...
    
    @cert.setter
    def cert(self, val): # -> None:
        ...
    


__all__ = ["Connection", "Client", "Server", "ConnectionState"]
