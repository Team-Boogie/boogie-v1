"""
This type stub file was generated by pyright.
"""

import contextlib
from collections.abc import Callable, Sequence
from dataclasses import dataclass
from typing import Any
from mitmproxy import hooks

logger = ...

def cut_traceback(tb, func_name):
    """
    Cut off a traceback at the function with the given name.
    The func_name's frame is excluded.

    Args:
        tb: traceback object, as returned by sys.exc_info()[2]
        func_name: function name

    Returns:
        Reduced traceback.
    """
    ...

@contextlib.contextmanager
def safecall():  # -> Generator[None, Any, None]:
    ...

class Loader:
    """
    A loader object is passed to the load() event when addons start up.
    """

    def __init__(self, master) -> None: ...
    def add_option(
        self,
        name: str,
        typespec: type,
        default: Any,
        help: str,
        choices: Sequence[str] | None = ...,
    ) -> None:
        """
        Add an option to mitmproxy.

        Help should be a single paragraph with no linebreaks - it will be
        reflowed by tools. Information on the data type should be omitted -
        it will be generated and added by tools as needed.
        """
        ...

    def add_command(self, path: str, func: Callable) -> None:
        """Add a command to mitmproxy.

        Unless you are generating commands programatically,
        this API should be avoided. Decorate your function with `@mitmproxy.command.command` instead.
        """
        ...

def traverse(chain):  # -> Generator[Unknown, Unknown, None]:
    """
    Recursively traverse an addon chain.
    """
    ...

@dataclass
class LoadHook(hooks.Hook):
    """
    Called when an addon is first loaded. This event receives a Loader
    object, which contains methods for adding options and commands. This
    method is where the addon configures itself.
    """

    loader: Loader
    ...

class AddonManager:
    def __init__(self, master) -> None: ...
    def clear(self):  # -> None:
        """
        Remove all addons.
        """
        ...

    def get(self, name):
        """
        Retrieve an addon by name. Addon names are equal to the .name
        attribute on the instance, or the lower case class name if that
        does not exist.
        """
        ...

    def register(self, addon):
        """
        Register an addon, call its load event, and then register all its
        sub-addons. This should be used by addons that dynamically manage
        addons.

        If the calling addon is already running, it should follow with
        running and configure events. Must be called within a current
        context.
        """
        ...

    def add(self, *addons: Any) -> None:
        """
        Add addons to the end of the chain, and run their load event.
        If any addon has sub-addons, they are registered.
        """
        ...

    def remove(self, addon):  # -> None:
        """
        Remove an addon and all its sub-addons.

        If the addon is not in the chain - that is, if it's managed by a
        parent addon - it's the parent's responsibility to remove it from
        its own addons attribute.
        """
        ...

    def __len__(self):  # -> int:
        ...

    def __str__(self) -> str: ...
    def __contains__(self, item):  # -> bool:
        ...

    async def handle_lifecycle(self, event: hooks.Hook):  # -> None:
        """
        Handle a lifecycle event.
        """
        ...

    async def invoke_addon(self, addon, event: hooks.Hook):  # -> None:
        """
        Asynchronously invoke an event on an addon and all its children.
        """
        ...

    def invoke_addon_sync(self, addon, event: hooks.Hook):  # -> None:
        """
        Invoke an event on an addon and all its children.
        """
        ...

    async def trigger_event(self, event: hooks.Hook):  # -> None:
        """
        Asynchronously trigger an event across all addons.
        """
        ...

    def trigger(self, event: hooks.Hook):  # -> None:
        """
        Trigger an event across all addons.

        This API is discouraged and may be deprecated in the future.
        Use `trigger_event()` instead, which provides the same functionality but supports async hooks.
        """
        ...
