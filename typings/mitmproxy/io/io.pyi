"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from typing import BinaryIO
from mitmproxy import flow

class FlowWriter:
    def __init__(self, fo) -> None:
        ...
    
    def add(self, f: flow.Flow) -> None:
        ...
    


class FlowReader:
    fo: BinaryIO
    def __init__(self, fo: BinaryIO) -> None:
        ...
    
    def peek(self, n: int) -> bytes:
        ...
    
    def stream(self) -> Iterable[flow.Flow]:
        """
        Yields Flow objects from the dump.
        """
        ...
    


class FilteredFlowWriter:
    def __init__(self, fo, flt) -> None:
        ...
    
    def add(self, f: flow.Flow) -> None:
        ...
    


def read_flows_from_paths(paths) -> list[flow.Flow]:
    """
    Given a list of filepaths, read all flows and return a list of them.
    From a performance perspective, streaming would be advisable -
    however, if there's an error with one of the files, we want it to be raised immediately.

    Raises:
        FlowReadException, if any error occurs.
    """
    ...

