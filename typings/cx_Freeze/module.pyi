"""
This type stub file was generated by pyright.
"""

from functools import cached_property
from pathlib import Path
from typing import TYPE_CHECKING
from cx_Freeze._importlib import metadata
from collections.abc import Sequence
from types import CodeType

"""Base class for Module and ConstantsModule."""
if TYPE_CHECKING:
    ...
__all__ = ["ConstantsModule", "Module", "ModuleHook"]
class DistributionCache(metadata.PathDistribution):
    """Cache the distribution package."""
    def __init__(self, cache_path: Path, name: str) -> None:
        """Construct a distribution.

        :param cache_path: Path indicating where to store the cache.
        :param name: The name of the distribution package to cache.
        :raises ModuleError: When the named package's distribution
            metadata cannot be found.
        """
        ...
    
    @property
    def binary_files(self) -> list[str]:
        """Return the binary files included in the package."""
        ...
    
    @property
    def installer(self) -> str:
        """Return the installer (pip, conda) for the distribution package."""
        ...
    
    @property
    def requires(self) -> list[str]:
        """Generated requirements specified for this Distribution."""
        ...
    
    @property
    def version(self) -> tuple[int, ...] | str | None:
        """Return the 'Version' metadata for the distribution package."""
        ...
    


class Module:
    """The Module class."""
    def __init__(self, name: str, path: Sequence[Path | str] | None = ..., filename: Path | str | None = ..., parent: Module | None = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def file(self) -> Path | None:
        """Module filename."""
        ...
    
    @file.setter
    def file(self, filename: Path | str | None) -> None:
        ...
    
    @cached_property
    def root_dir(self) -> Path | None:
        ...
    
    @cached_property
    def stub_code(self) -> CodeType | None:
        ...
    
    def get_imports_from_file(self, source_file: Path) -> str | None:
        """Get the implicit imports in a stub file."""
        ...
    
    @property
    def in_file_system(self) -> int:
        """Returns a value indicating where the module/package will be stored:
        0. in a zip file (not directly in the file system)
        1. in the file system, package with modules and data
        2. in the file system, only detected modules.
        """
        ...
    
    @in_file_system.setter
    def in_file_system(self, value: int) -> None:
        ...
    
    def load_hook(self) -> None:
        """Load hook for the given module if one is present.

        For instance, a load hook for PyQt5.QtCore:
        - Using ModuleHook class:
            # module and hook methods are lowercased.
            hook = pyqt5.Hook()
            hook.qt_qtcore()
        - For functions present in hooks.__init__:
            # module and load hook functions use the original case.
            load_PyQt5_QtCore()
        - For functions in a separated module:
            # module and load hook functions are lowercased.
            pyqt5.load_pyqt5_qtcore()
        """
        ...
    
    def update_distribution(self, name: str | None = ...) -> None:
        """Update the distribution cache based on its name.
        This method may be used to link an distribution's name to a module.

        Example: ModuleFinder cannot detects the distribution of _cffi_backend
        but in a hook we can link it to 'cffi'.
        """
        ...
    


class ModuleHook:
    """The Module Hook class."""
    def __init__(self, module: Module) -> None:
        ...
    
    def __call__(self, finder) -> None:
        ...
    


class ConstantsModule:
    """Base ConstantsModule class."""
    def __init__(self, release_string: str | None = ..., copyright_string: str | None = ..., module_name: str = ..., time_format: str = ..., constants: list[str] | None = ...) -> None:
        ...
    
    def create(self, tmp_path: Path, modules: list[Module]) -> Path:
        """Create the module which consists of declaration statements for each
        of the values.
        """
        ...
    


