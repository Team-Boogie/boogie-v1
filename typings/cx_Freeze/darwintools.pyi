"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from pathlib import Path

def isMachOFile(path: Path) -> bool:
    """Determines whether the file is a Mach-O file."""
    ...

class MachOReference:
    """Represents a linking reference from MachO file to another file."""
    def __init__(self, source_file: DarwinFile, raw_path: str, resolved_path: Path | None) -> None:
        """:param source_file: DarwinFile object for file in which the reference
        was found
        :param raw_path: The load path that appears in the file
        (may include @rpath, etc.)
        :param resolved_path: The path resolved to an explicit path to a file
        on system. Or None, if the path could not be resolved at the time the
        DarwinFile was processed.
        """
        ...
    
    def isResolved(self) -> bool:
        ...
    
    def setTargetFile(self, darwin_file: DarwinFile): # -> None:
        ...
    


class DarwinFile:
    """A DarwinFile object represents a file that will be copied into the
    application, and record where it was ultimately moved to in the application
    bundle. Mostly used to provide special handling for copied files that are
    Mach-O files.
    """
    def __init__(self, path: str | Path, referencing_file: DarwinFile | None = ..., strict: bool = ...) -> None:
        """:param path: The original path of the DarwinFile
        (before copying into app)
        :param referencing_file: DarwinFile object representing the referencing
        source file
        :param strict: Do not make guesses about rpath resolution. If the
        load does not resolve, throw an Exception.
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def fileReferenceDepth(self) -> int:
        """Returns how deep this Mach-O file is in the dynamic load order."""
        ...
    
    def printFileInformation(self): # -> None:
        """Prints information about the Mach-O file."""
        ...
    
    def setBuildPath(self, path: Path): # -> None:
        ...
    
    def getBuildPath(self) -> Path | None:
        ...
    
    @staticmethod
    def isExecutablePath(path: str) -> bool:
        ...
    
    @staticmethod
    def isLoaderPath(path: str) -> bool:
        ...
    
    @staticmethod
    def isRPath(path: str) -> bool:
        ...
    
    def resolveLoader(self, path: str) -> Path | None:
        """Resolve a path that includes @loader_path. @loader_path represents
        the directory in which the DarwinFile is located.
        """
        ...
    
    def resolveExecutable(self, path: str) -> Path:
        """@executable_path should resolve to the directory where the original
        executable was located. By default, we set that to the directory of
        the library, so it would resolve in the same was as if linked from an
        executable in the same directory.
        """
        ...
    
    def resolveRPath(self, path: str) -> Path | None:
        ...
    
    def getRPath(self) -> list[Path]:
        """Returns the rpath in effect for this file. Determined by rpath
        commands in this file and (recursively) the chain of files that
        referenced this file.
        """
        ...
    
    def resolvePath(self, path: str) -> Path | None:
        """Resolves any @executable_path, @loader_path, and @rpath references
        in a path.
        """
        ...
    
    def resolveLibraryPaths(self): # -> None:
        ...
    
    def getDependentFilePaths(self) -> set[Path]:
        """Returns a list the available resolved paths to dependencies."""
        ...
    
    def getMachOReferenceList(self) -> list[MachOReference]:
        ...
    
    def getMachOReferenceForPath(self, path: Path) -> MachOReference:
        """Returns the reference pointing to the specified path, baed on paths
        stored in self.machOReferenceTargetPath. Raises Exception if not
        available.
        """
        ...
    


class MachOCommand:
    """Represents a load command in a MachO file."""
    def __init__(self, lines: list[str]) -> None:
        ...
    
    def displayString(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @staticmethod
    def parseLines(lines: list[str]) -> MachOCommand:
        ...
    


class MachOLoadCommand(MachOCommand):
    def __init__(self, lines: list[str]) -> None:
        ...
    
    def getPath(self): # -> str | None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class MachORPathCommand(MachOCommand):
    def __init__(self, lines: list[str]) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def printMachOFiles(fileList: list[DarwinFile]): # -> None:
    ...

def change_load_reference(filename: str, old_reference: str, new_reference: str, verbose: bool = ...): # -> None:
    """Utility function that uses install_name_tool to change old_reference to
    new_reference in the machO file specified by filename.
    """
    ...

def apply_adhoc_signature(filename: str): # -> None:
    ...

class DarwinFileTracker:
    """Object to track the DarwinFiles that have been added during a freeze."""
    def __init__(self, strict: bool = ...) -> None:
        ...
    
    def __iter__(self) -> Iterable[DarwinFile]:
        ...
    
    def pathIsAlreadyCopiedTo(self, target_path: Path) -> bool:
        """Check if the given target_path has already has a file copied to
        it.
        """
        ...
    
    def getDarwinFile(self, source_path: Path, target_path: Path) -> DarwinFile:
        """Gets the DarwinFile for file copied from source_path to target_path.
        If either (i) nothing, or (ii) a different file has been copied to
        targetPath, raises a PlatformError.
        """
        ...
    
    def recordCopiedFile(self, target_path: Path, darwin_file: DarwinFile): # -> None:
        """Record that a DarwinFile is being copied to a given path. If a
        file has been copied to that path, raise a PlatformError.
        """
        ...
    
    def cacheReferenceTo(self, source_path: Path, reference: MachOReference): # -> None:
        ...
    
    def getCachedReferenceTo(self, source_path: Path) -> MachOReference | None:
        ...
    
    def findDarwinFileForFilename(self, filename: str) -> DarwinFile | None:
        """Attempts to locate a copied DarwinFile with the specified filename
        and returns that. Otherwise returns None.
        """
        ...
    
    def finalizeReferences(self): # -> None:
        """This function does a final pass through the references for all the
        copied DarwinFiles and attempts to clean up any remaining references
        that are not already marked as copied. It covers two cases where the
        reference might not be marked as copied:
        1) Files where _CopyFile was called without copyDependentFiles=True
           (in which the information would not have been added to the
            references at that time).
        2) Files with broken @rpath references. We try to fix that up here by
           seeing if the relevant file was located *anywhere* as part of the
        freeze process.
        """
        ...
    
    def set_relative_reference_paths(self, build_dir: str, bin_dir: str): # -> None:
        """Make all the references from included Mach-O files to other included
        Mach-O files relative.
        """
        ...
    


