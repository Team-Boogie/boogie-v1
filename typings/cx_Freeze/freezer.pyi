"""
This type stub file was generated by pyright.
"""

from functools import cached_property
from pathlib import Path
from typing import Any, TYPE_CHECKING
from cx_Freeze._compat import IS_MINGW, IS_WINDOWS
from cx_Freeze.executable import Executable
from cx_Freeze.module import ConstantsModule
from cx_Freeze.parser import ELFParser, PEParser, Parser
from collections.abc import Mapping, Sequence
from cx_Freeze._typing import IncludesList
from .darwintools import DarwinFile

"""The core class for freezing scripts into executables."""
if TYPE_CHECKING:
    ...
if IS_WINDOWS or IS_MINGW:
    ...
else:
    ...
__all__ = ["ConstantsModule", "Executable", "Freezer"]
class Freezer:
    """Freezer base class."""
    def __new__(cls, *args, **kwargs) -> WinFreezer | DarwinFreezer | LinuxFreezer:
        ...
    
    def __init__(self, executables: Sequence[Executable, Mapping[str, str], str], constants_module: ConstantsModule | None = ..., includes: list[str] | None = ..., excludes: list[str] | None = ..., packages: list[str] | None = ..., replace_paths: list[str] | None = ..., compress: bool | None = ..., optimize: int = ..., path: list[str | Path] | None = ..., target_dir: str | Path | None = ..., bin_includes: list[str] | None = ..., bin_excludes: list[str] | None = ..., bin_path_includes: list[str] | None = ..., bin_path_excludes: list[str] | None = ..., include_files: IncludesList | None = ..., zip_includes: IncludesList | None = ..., silent: bool | int = ..., metadata: Any = ..., include_msvcr: bool = ..., zip_include_packages: Sequence[str] | None = ..., zip_exclude_packages: Sequence[str] | None = ..., zip_filename: Path | str | None = ...) -> None:
        ...
    
    @property
    def target_dir(self) -> Path:
        """Directory for built executables and dependent files."""
        ...
    
    @target_dir.setter
    def target_dir(self, path: str | Path | None) -> None:
        ...
    
    def freeze(self) -> None:
        """Do the freeze."""
        ...
    
    def print_report(self) -> None:
        """Display report:
        - list of modules and packages;
        - list of modules  that weren't found;
        - list of dependencies that weren't found.
        """
        ...
    


class WinFreezer(Freezer, PEParser):
    """Freezer base class for Windows OS."""
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @cached_property
    def runtime_files(self) -> set[str]:
        """Deal with C-runtime files."""
        ...
    


class DarwinFreezer(Freezer, Parser):
    """Freezer base class for macOS."""
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def get_dependent_files(self, filename: Path, darwinFile: DarwinFile | None = ...) -> set[Path]:
        ...
    
    _get_dependent_files = ...


class LinuxFreezer(Freezer, ELFParser):
    """Freezer base class for Linux and Posix OSes."""
    def __init__(self, *args, **kwargs) -> None:
        ...
    


