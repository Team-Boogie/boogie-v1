"""
This type stub file was generated by pyright.
"""

import os
from pathlib import Path
from typing import ClassVar

"""Module for the VersionInfo base class."""
__all__ = ["VersionInfo"]
CHAR = ...
WCHAR = ...
WORD = ...
DWORD = ...
RT_VERSION = ...
ID_VERSION = ...
VS_FFI_SIGNATURE = ...
VS_FFI_STRUCVERSION = ...
VS_FFI_FILEFLAGSMASK = ...
VOS_NT_WINDOWS32 = ...
KEY_VERSION_INFO = ...
KEY_STRING_FILE_INFO = ...
KEY_STRING_TABLE = ...
KEY_VAR_FILE_INFO = ...
COMMENTS_MAX_LEN = ...
if os.environ.get("CX_FREEZE_STAMP", "") == "pywin32":
    CX_FREEZE_STAMP = ...
else:
    CX_FREEZE_STAMP = ...
class Structure:
    """Abstract base class for structures in native byte order. Concrete
    structure and union types must be created by subclassing one of these
    types, and at least define a _fields class variable.
    """
    def __init__(self, *args) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def as_dict(self) -> dict[str, str]:
        """Return the field values as dictionary."""
        ...
    
    def to_buffer(self) -> bytes:
        """Return the field values to a buffer."""
        ...
    


class VS_FIXEDFILEINFO(Structure):
    """Version information for a Win32 file."""
    _fields: ClassVar[list[tuple[str, str]]] = ...


class String(Structure):
    """File version resource representation of the data."""
    def __init__(self, key: str, value: int | str | Structure | None = ...) -> None:
        ...
    
    def children(self, value: String) -> None:
        """Represents the child String object."""
        ...
    


class VersionInfo:
    """Organizes the version information (resource) data of a file."""
    def __init__(self, version: str, internal_name: str | None = ..., original_filename: str | None = ..., comments: str | None = ..., company: str | None = ..., description: str | None = ..., copyright: str | None = ..., trademarks: str | None = ..., product: str | None = ..., dll: bool | None = ..., debug: bool | None = ..., verbose: bool = ...) -> None:
        ...
    
    def stamp(self, path: str | Path) -> None:
        """Stamp a Win32 binary with version information."""
        ...
    
    def version_info(self, path: Path) -> String:
        """Returns the String version info used to stamp the version."""
        ...
    


def main_test(args=...) -> None:
    """Command line test."""
    ...

if __name__ == "__main__":
    ...
