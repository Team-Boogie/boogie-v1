"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import TYPE_CHECKING
from setuptools import Distribution

"""Module for the Executable base class."""
if TYPE_CHECKING:
    ...
STRINGREPLACE = ...
__all__ = ["Executable", "validate_executables"]
class Executable:
    """Base Executable class."""
    def __init__(self, script: str | Path, init_script: str | Path | None = ..., base: str | Path | None = ..., target_name: str | None = ..., icon: str | Path | None = ..., shortcut_name: str | None = ..., shortcut_dir: str | Path | None = ..., copyright: str | None = ..., trademarks: str | None = ..., manifest: str | Path | None = ..., uac_admin: bool = ..., uac_uiaccess: bool = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def base(self) -> Path:
        """:return: the name of the base executable
        :rtype: Path

        """
        ...
    
    @base.setter
    def base(self, name: str | Path | None) -> None:
        ...
    
    @property
    def icon(self) -> Path | None:
        """:return: the path of the icon
        :rtype: Path

        """
        ...
    
    @icon.setter
    def icon(self, name: str | Path | None) -> None:
        ...
    
    @property
    def init_module_name(self) -> str:
        """:return: the name of the init module in zip file
        :rtype: str

        """
        ...
    
    @property
    def init_script(self) -> Path:
        """:return: the name of the initialization script that will be executed
        before the main script is executed
        :rtype: Path

        """
        ...
    
    @init_script.setter
    def init_script(self, name: str | Path | None) -> None:
        ...
    
    @property
    def main_module_name(self) -> str:
        """:return: the name of the main module in zip file
        :rtype: str

        """
        ...
    
    @property
    def main_script(self) -> Path:
        """:return: the path of the file containing the script which is to be
        frozen
        :rtype: Path

        """
        ...
    
    @main_script.setter
    def main_script(self, name: str | Path) -> None:
        ...
    
    @property
    def manifest(self) -> str | None:
        """:return: the XML schema of the manifest which is to be included in
        the frozen executable
        :rtype: str

        """
        ...
    
    @manifest.setter
    def manifest(self, name: str | Path | None) -> None:
        ...
    
    @property
    def shortcut_name(self) -> str:
        """:return: the name to give a shortcut for the executable when
        included in an MSI package (Windows only).
        :rtype: str

        """
        ...
    
    @shortcut_name.setter
    def shortcut_name(self, name: str) -> None:
        ...
    
    @property
    def shortcut_dir(self) -> Path:
        """:return: tthe directory in which to place the shortcut when being
        installed by an MSI package; see the MSI Shortcut table documentation
        for more information on what values can be placed here (Windows only).
        :rtype: Path

        """
        ...
    
    @shortcut_dir.setter
    def shortcut_dir(self, name: str | Path) -> None:
        ...
    
    @property
    def target_name(self) -> str:
        """:return: the name of the target executable
        :rtype: str

        """
        ...
    
    @target_name.setter
    def target_name(self, name: str | None) -> None:
        ...
    


def validate_executables(dist: Distribution, attr: str, value) -> None:
    """Verify that value is a valid executables attribute, which could be an
    Executable list, a mapping list or a string list.
    """
    ...

