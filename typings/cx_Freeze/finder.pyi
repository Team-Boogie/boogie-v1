"""
This type stub file was generated by pyright.
"""

from pathlib import Path, PurePath
from typing import TYPE_CHECKING
from cx_Freeze.module import ConstantsModule, Module
from collections.abc import Sequence
from cx_Freeze._typing import IncludesList

"""Module Finder - discovers what modules are required by the code."""
if TYPE_CHECKING:
    ...
ALL_SUFFIXES = ...
CALL_FUNCTION = ...
CALL = ...
PRECALL = ...
EXTENDED_ARG = ...
LOAD_CONST = ...
LOAD_NAME = ...
IMPORT_NAME = ...
IMPORT_FROM = ...
IMPORT_STAR = ...
STORE_NAME = ...
STORE_GLOBAL = ...
STORE_OPS = ...
HAVE_ARGUMENT = ...
__all__ = ["Module", "ModuleFinder"]
class ModuleFinder:
    """ModuleFinder base class."""
    def __init__(self, constants_module: ConstantsModule | None = ..., excludes: list[str] | None = ..., include_files: IncludesList | None = ..., path: list[str | Path] | None = ..., replace_paths: list[tuple[str, str]] | None = ..., zip_exclude_packages: Sequence[str] | None = ..., zip_include_packages: Sequence[str] | None = ..., zip_include_all_packages: bool = ..., zip_includes: IncludesList | None = ...) -> None:
        ...
    
    def cleanup(self) -> None:
        ...
    
    def add_alias(self, name: str, alias_for: str) -> None:
        """Add an alias for a particular module; when an attempt is made to
        import a module using the alias name, import the actual name instead.
        """
        ...
    
    def add_base_modules(self) -> None:
        """Add the base modules to the finder. These are the modules that
        Python imports itself during initialization and, if not found,
        can result in behavior that differs from running from source;
        also include modules used within the bootstrap code.

        When cx_Freeze is built, these modules (and modules they load) are
        included in the startup zip file.
        """
        ...
    
    def add_constant(self, name: str, value: str) -> None:
        """Makes available a constant in the module BUILD_CONSTANTS which is
        used in the initscripts.
        """
        ...
    
    def exclude_dependent_files(self, filename: Path | str) -> None:
        """Exclude the dependent files of the named file from the resulting
        frozen executable.
        """
        ...
    
    def exclude_module(self, name: str) -> None:
        """Exclude the named module and its submodules from the resulting
        frozen executable.
        """
        ...
    
    def include_file_as_module(self, path: Path | str, name: str | None = ...) -> Module:
        """Include the named file as a module in the frozen executable."""
        ...
    
    def include_files(self, source_path: Path | str, target_path: Path | str, copy_dependent_files: bool = ...) -> None:
        """Include the files in the given directory in the target build."""
        ...
    
    def include_module(self, name: str) -> Module:
        """Include the named module in the frozen executable."""
        ...
    
    def include_package(self, name: str) -> Module:
        """Include the named package and any submodules in the frozen
        executable.
        """
        ...
    
    def report_missing_modules(self) -> None:
        """Display a list of modules that weren't found."""
        ...
    
    @property
    def optimize(self) -> int:
        """The value of optimize flag propagated according to the user's
        choice.
        """
        ...
    
    @optimize.setter
    def optimize(self, value: int) -> None:
        ...
    
    def zip_include_files(self, source_path: str | Path, target_path: str | Path | PurePath | None = ...) -> None:
        """Include files or all of the files in a directory to the zip file."""
        ...
    


