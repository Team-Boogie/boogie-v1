
from mitmproxy import http
from utils import checks
from type_definitions import defaultUserSettings
from constants import URLs
from utils.blurl import compress_json_content

class blurl:
    def __init__(self, userSettings: defaultUserSettings):
        self.userSettings: defaultUserSettings = userSettings

    @checks.is_fortnite_request
    def response(self, flow: http.HTTPFlow):
        if not self.userSettings["premium"]:
            return

        if not (
            ".blurl" in flow.request.url.lower()
            and self.userSettings["premium"] == True
        ):
            return


        if self.userSettings["premium"] and self.userSettings["savedUrl"] is not None:
            url = self.userSettings["savedUrl"]
        else:
            url = f"{URLs.CDN}/maeko.mp4"

        playlist: dict[str, list[dict[str, str | float]]] = {
            "playlists": [
                {
                    "type": "main",
                    "language": "en",
                    "url": url,
                    "data": '<?xml version="1.0" encoding="utf-8"?><MPD xmlns="urn:mpeg:dash:schema:mpd:2011" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="urn:mpeg:DASH:schema:MPD:2011 http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd" xmlns:clearkey="http://dashif.org/guidelines/clearKey" xmlns:cenc="urn:mpeg:cenc:2013" profiles="urn:mpeg:dash:profile:isoff-live:2011" type="static" mediaPresentationDuration="PT1H8M10.700S" minBufferTime="PT4.000S"><ProgramInformation></ProgramInformation><Period id="0" start="PT0S"><AdaptationSet id="0" contentType="audio" segmentAlignment="true" bitstreamSwitching="true"><Representation id="0" audioSamplingRate="48000" bandwidth="128000" mimeType="audio/mp4" codecs="mp4a.40.2"><SegmentTemplate duration="2000000" timescale="1000000" initialization="init_ar_AR_$RepresentationID$.mp4" media="segment_ar_AR_$RepresentationID$_$Number$.m4s" startNumber="1"></SegmentTemplate><AudioChannelConfiguration schemeIdUri="urn:mpeg:dash:23003:3:audio_channel_configuration:2011" value="2"></AudioChannelConfiguration></Representation><ContentProtection schemeIdUri="urn:mpeg:dash:mp4protection:2011" value="cenc" cenc:default_KID="aceaae98-5754-0f4a-483e-25861a192e55"></ContentProtection><ContentProtection schemeIdUri="urn:uuid:e2719d58-a985-b3c9-781a-b030af78d30e" value="ClearKey1.0"><clearkey:Laurl Lic_type="EME-1.0">key.key</clearkey:Laurl></ContentProtection></AdaptationSet></Period></MPD>',
                    "duration": 4113.700121999999,
                }
            ]
        }
        flow.response = http.Response.make(
            200,
            content=compress_json_content(playlist),
        )
